// Generated by diesel_ext

#![allow(unused)]
#![allow(clippy::all)]


use chrono::NaiveDate;
use chrono::NaiveDateTime;
use bigdecimal::BigDecimal;
#[derive(Queryable, Debug)]
pub struct BalanceSheetStatement {
    pub id: i64,
    pub company_id: i64,
    pub reported_currency_id: Option<i64>,
    pub period_id: Option<i64>,
    pub is_ttm: bool,
    pub from_average: bool,
    pub link: String,
    pub final_link: String,
    pub date: NaiveDate,
    pub accumulated_other_comprehensive_income_and_loss: Option<BigDecimal>,
    pub accounts_payable: Option<BigDecimal>,
    pub cash_and_cash_equivalents: Option<BigDecimal>,
    pub cash_and_short_term_investments: Option<BigDecimal>,
    pub common_stocks: Option<BigDecimal>,
    pub deferred_revenue: Option<BigDecimal>,
    pub deferred_revenue_non_current: Option<BigDecimal>,
    pub deferred_tax_liabilities_non_current: Option<BigDecimal>,
    pub goodwill: Option<BigDecimal>,
    pub goodwill_and_intangible_assets: Option<BigDecimal>,
    pub intangible_assets: Option<BigDecimal>,
    pub inventory: Option<BigDecimal>,
    pub long_term_debt: Option<BigDecimal>,
    pub long_term_investments: Option<BigDecimal>,
    pub net_debt: Option<BigDecimal>,
    pub net_receivables: Option<BigDecimal>,
    pub other_assets: Option<BigDecimal>,
    pub other_current_assets: Option<BigDecimal>,
    pub other_current_liabilities: Option<BigDecimal>,
    pub other_liabilities: Option<BigDecimal>,
    pub other_non_current_assets: Option<BigDecimal>,
    pub other_non_current_liabilities: Option<BigDecimal>,
    pub other_total_stockholders_equity: Option<BigDecimal>,
    pub preferred_stocks: Option<BigDecimal>,
    pub property_plant_and_equipment: Option<BigDecimal>,
    pub retained_earnings: Option<BigDecimal>,
    pub short_term_debt: Option<BigDecimal>,
    pub short_term_investments: Option<BigDecimal>,
    pub tax_assets: Option<BigDecimal>,
    pub tax_payables: Option<BigDecimal>,
    pub total_assets: Option<BigDecimal>,
    pub total_current_assets: Option<BigDecimal>,
    pub total_current_liabilities: Option<BigDecimal>,
    pub total_debt: Option<BigDecimal>,
    pub total_investments: Option<BigDecimal>,
    pub total_liabilities: Option<BigDecimal>,
    pub total_liabilities_and_total_equity: Option<BigDecimal>,
    pub total_non_current_assets: Option<BigDecimal>,
    pub total_non_current_liabilities: Option<BigDecimal>,
    pub total_stockholders_equity: Option<BigDecimal>,
}

#[derive(Queryable, Debug)]
pub struct CashflowStatement {
    pub id: i64,
    pub company_id: i64,
    pub reported_currency_id: Option<i64>,
    pub period_id: Option<i64>,
    pub is_ttm: bool,
    pub from_average: bool,
    pub link: String,
    pub final_link: String,
    pub date: NaiveDate,
    pub acquisitions_net: Option<BigDecimal>,
    pub accounts_payable: Option<BigDecimal>,
    pub accounts_receivable: Option<BigDecimal>,
    pub capital_expenditures: Option<BigDecimal>,
    pub cash_beginning_period: Option<BigDecimal>,
    pub cash_end_period: Option<BigDecimal>,
    pub change_in_working_capital: Option<BigDecimal>,
    pub common_stock_issued: Option<BigDecimal>,
    pub common_stock_repurchased: Option<BigDecimal>,
    pub debt_repayment: Option<BigDecimal>,
    pub deferred_income_tax: Option<BigDecimal>,
    pub depreciation_and_amortization: Option<BigDecimal>,
    pub dividends_paid: Option<BigDecimal>,
    pub effect_of_forex_exchange: Option<BigDecimal>,
    pub financing_activities_cash_flow: Option<BigDecimal>,
    pub free_cash_flow: Option<BigDecimal>,
    pub inventory: Option<BigDecimal>,
    pub investing_activities_cash_flow: Option<BigDecimal>,
    pub investments_in_property_plant_and_equipment: Option<BigDecimal>,
    pub net_change_in_cash: Option<BigDecimal>,
    pub net_income: Option<BigDecimal>,
    pub operating_activities_cash_flow: Option<BigDecimal>,
    pub other_financing_activities: Option<BigDecimal>,
    pub other_investing_activities: Option<BigDecimal>,
    pub other_non_cash_items: Option<BigDecimal>,
    pub other_working_capital: Option<BigDecimal>,
    pub purchases_of_investments: Option<BigDecimal>,
    pub sales_and_maturities_of_investments: Option<BigDecimal>,
    pub stock_based_compensation: Option<BigDecimal>,
}

#[derive(Queryable, Debug)]
pub struct Company {
    pub id: i64,
    pub ticker: String,
    pub name: Option<String>,
    pub website: Option<String>,
    pub state: Option<String>,
    pub ceo: Option<String>,
    pub image: Option<String>,
    pub city: Option<String>,
    pub employees: Option<String>,
    pub address: Option<String>,
    pub zip_code: Option<String>,
    pub cik: Option<String>,
    pub cusip: Option<String>,
    pub isin: Option<String>,
    pub description: Option<String>,
    pub ipo_date: Option<NaiveDate>,
    pub country_id: Option<i64>,
    pub exchange_id: Option<i64>,
    pub industry_id: Option<i64>,
    pub sector_id: Option<i64>,
    pub is_adr: bool,
    pub is_fund: bool,
}

#[derive(Queryable, Debug)]
pub struct CompanyGrowth {
    pub id: i64,
    pub company_id: i64,
    pub reported_currency_id: Option<i64>,
    pub period_id: Option<i64>,
    pub is_ttm: bool,
    pub from_average: bool,
    pub date: NaiveDate,
    pub capital_expenditure_growth: BigDecimal,
    pub cost_of_revenue_growth: BigDecimal,
    pub earnings_per_share_growth: BigDecimal,
    pub free_cash_flow_growth: BigDecimal,
    pub net_income_growth: BigDecimal,
    pub operating_expenses_growth: BigDecimal,
    pub owners_earnings_growth: BigDecimal,
    pub research_and_development_expenses_growth: BigDecimal,
    pub revenue_growth: BigDecimal,
    pub shares_buyback: BigDecimal,
}

#[derive(Queryable, Debug)]
pub struct Country {
    pub id: i64,
    pub name: String,
    pub code: String,
    pub created_at: NaiveDateTime,
    pub updated_at: NaiveDateTime,
}

#[derive(Queryable, Debug)]
pub struct Currency {
    pub id: i64,
    pub code: String,
    pub name: String,
    pub symbol: String,
    pub created_at: NaiveDateTime,
    pub updated_at: NaiveDateTime,
}

#[derive(Queryable, Debug)]
pub struct CurrenciesCountriesM2m {
    pub id: i64,
    pub currency_id: i64,
    pub country_id: i64,
    pub created_at: NaiveDateTime,
    pub updated_at: NaiveDateTime,
}

#[derive(Queryable, Debug)]
pub struct EfficiencyRatio {
    pub id: i64,
    pub company_id: i64,
    pub reported_currency_id: Option<i64>,
    pub period_id: Option<i64>,
    pub is_ttm: bool,
    pub from_average: bool,
    pub date: NaiveDate,
    pub accounts_payable_turnover: BigDecimal,
    pub asset_turnover: BigDecimal,
    pub cash_conversion_cycle: BigDecimal,
    pub cash_conversion_ratio: BigDecimal,
    pub days_inventory_outstanding: BigDecimal,
    pub days_payables_outstanding: BigDecimal,
    pub days_sales_outstanding: BigDecimal,
    pub fixed_asset_turnover: BigDecimal,
    pub free_cash_flow_to_operating_cash_flow: BigDecimal,
    pub inventory_turnover: BigDecimal,
    pub operating_cycle: BigDecimal,
}

#[derive(Queryable, Debug)]
pub struct EnterpriseValueRatio {
    pub id: i64,
    pub company_id: i64,
    pub reported_currency_id: Option<i64>,
    pub period_id: Option<i64>,
    pub is_ttm: bool,
    pub from_average: bool,
    pub date: NaiveDate,
    pub company_equity_multiplier: BigDecimal,
    pub enterprise_value: BigDecimal,
    pub enterprise_value_to_free_cash_flow: BigDecimal,
    pub enterprise_value_to_operating_cash_flow: BigDecimal,
    pub enterprise_value_to_sales: BigDecimal,
    pub enterprise_value_multiple: BigDecimal,
    pub market_capitalization: BigDecimal,
}

#[derive(Queryable, Debug)]
pub struct ExchangeRate {
    pub id: i64,
    pub base_id: i64,
    pub target_id: i64,
    pub conversion_rate: BigDecimal,
    pub date: NaiveDateTime,
    pub created_at: NaiveDateTime,
    pub updated_at: NaiveDateTime,
}

#[derive(Queryable, Debug)]
pub struct Exchange {
    pub id: i64,
    pub name: String,
    pub ticker: String,
    pub country_id: Option<i64>,
    pub image: String,
    pub created_at: NaiveDateTime,
    pub updated_at: NaiveDateTime,
}

#[derive(Queryable, Debug)]
pub struct Expense {
    pub id: i64,
    pub user_id: i64,
    pub amount: BigDecimal,
    pub date: NaiveDateTime,
    pub description: Option<String>,
    pub comment: Option<String>,
    pub currency_id: Option<i64>,
    pub amount_converted: BigDecimal,
    pub created_at: NaiveDateTime,
    pub updated_at: NaiveDateTime,
}

#[derive(Queryable, Debug)]
pub struct FreeCashflowRatio {
    pub id: i64,
    pub company_id: i64,
    pub reported_currency_id: Option<i64>,
    pub period_id: Option<i64>,
    pub is_ttm: bool,
    pub from_average: bool,
    pub date: NaiveDate,
    pub free_cash_flow: BigDecimal,
    pub free_cash_flow_equity: BigDecimal,
    pub unlevered_free_cash_flow: BigDecimal,
    pub unlevered_free_cash_flow_ebit: BigDecimal,
    pub owners_earnings: BigDecimal,
}

#[derive(Queryable, Debug)]
pub struct IncomeStatement {
    pub id: i64,
    pub company_id: i64,
    pub reported_currency_id: Option<i64>,
    pub period_id: Option<i64>,
    pub is_ttm: bool,
    pub from_average: bool,
    pub link: String,
    pub final_link: String,
    pub date: NaiveDate,
    pub cost_and_expenses: Option<BigDecimal>,
    pub cost_of_revenue: Option<BigDecimal>,
    pub depreciation_and_amortization: Option<BigDecimal>,
    pub earnings_before_interest_taxes_depreciation_and_amortization: Option<BigDecimal>,
    pub general_and_administrative_expenses: Option<BigDecimal>,
    pub gross_profit: Option<BigDecimal>,
    pub income_before_tax: Option<BigDecimal>,
    pub income_tax_expenses: Option<BigDecimal>,
    pub interest_expense: Option<BigDecimal>,
    pub net_income: Option<BigDecimal>,
    pub net_total_other_income_and_expenses: Option<BigDecimal>,
    pub operating_expenses: Option<BigDecimal>,
    pub operating_income: Option<BigDecimal>,
    pub other_expenses: Option<BigDecimal>,
    pub research_and_development_expenses: Option<BigDecimal>,
    pub revenue: Option<BigDecimal>,
    pub selling_and_marketing_expenses: Option<BigDecimal>,
    pub selling_general_and_administrative_expenses: Option<BigDecimal>,
    pub weighted_average_diluted_shares_outstanding: Option<BigDecimal>,
    pub weighted_average_shares_outstanding: Option<BigDecimal>,
}

#[derive(Queryable, Debug)]
pub struct Income {
    pub id: i64,
    pub user_id: i64,
    pub amount: BigDecimal,
    pub date: NaiveDateTime,
    pub description: Option<String>,
    pub comment: Option<String>,
    pub currency_id: i64,
    pub amount_converted: BigDecimal,
    pub created_at: NaiveDateTime,
    pub updated_at: NaiveDateTime,
}

#[derive(Queryable, Debug)]
pub struct Industry {
    pub id: i64,
    pub name: String,
    pub created_at: NaiveDateTime,
    pub updated_at: NaiveDateTime,
}

#[derive(Queryable, Debug)]
pub struct Investment {
    pub id: i64,
    pub fee: BigDecimal,
    pub quantity: BigDecimal,
    pub cost: BigDecimal,
    pub user_id: i64,
    pub amount: BigDecimal,
    pub date: NaiveDateTime,
    pub description: Option<String>,
    pub comment: Option<String>,
    pub currency_id: i64,
    pub amount_converted: BigDecimal,
    pub asset_type: String,
    pub asset_id: i64,
    pub created_at: NaiveDateTime,
    pub updated_at: NaiveDateTime,
}

#[derive(Queryable, Debug)]
pub struct LiquidityRatio {
    pub id: i64,
    pub company_id: i64,
    pub reported_currency_id: Option<i64>,
    pub period_id: Option<i64>,
    pub is_ttm: bool,
    pub from_average: bool,
    pub date: NaiveDate,
    pub cash_ratio: BigDecimal,
    pub current_ratio: BigDecimal,
    pub debt_to_equity_ratio: BigDecimal,
    pub operating_cash_flow_ratio: BigDecimal,
    pub quick_ratio: BigDecimal,
}

#[derive(Queryable, Debug)]
pub struct MarginRatio {
    pub id: i64,
    pub company_id: i64,
    pub reported_currency_id: Option<i64>,
    pub period_id: Option<i64>,
    pub is_ttm: bool,
    pub from_average: bool,
    pub date: NaiveDate,
    pub free_cash_flow_equity_to_net_income: BigDecimal,
    pub free_cash_flow_margin: BigDecimal,
    pub gross_margin: BigDecimal,
    pub net_income_margin: BigDecimal,
    pub owners_earnings_to_net_income: BigDecimal,
    pub unlevered_free_cash_flow_to_net_income: BigDecimal,
    pub unlevered_free_cash_flow_to_operating_income: BigDecimal,
    pub unlevered_free_cash_flow_ebit_to_net_income: BigDecimal,
}

#[derive(Queryable, Debug)]
pub struct NonGaapFigure {
    pub id: i64,
    pub company_id: i64,
    pub reported_currency_id: Option<i64>,
    pub period_id: Option<i64>,
    pub is_ttm: bool,
    pub from_average: bool,
    pub date: NaiveDate,
    pub average_accounts_payable: BigDecimal,
    pub average_inventory: BigDecimal,
    pub dividend_yield: BigDecimal,
    pub earnings_yield: BigDecimal,
    pub effective_tax_rate: BigDecimal,
    pub free_cash_flow_yield: BigDecimal,
    pub income_quality: BigDecimal,
    pub invested_capital: BigDecimal,
    pub market_capitalization: BigDecimal,
    pub net_current_asset_value: BigDecimal,
    pub net_operating_profit_after_tax: BigDecimal,
    pub normalized_income: BigDecimal,
    pub payout_ratio: BigDecimal,
    pub retention_ratio: BigDecimal,
    pub tangible_assets: BigDecimal,
}

#[derive(Queryable, Debug)]
pub struct OperationRiskRatio {
    pub id: i64,
    pub company_id: i64,
    pub reported_currency_id: Option<i64>,
    pub period_id: Option<i64>,
    pub is_ttm: bool,
    pub from_average: bool,
    pub date: NaiveDate,
    pub asset_coverage_ratio: BigDecimal,
    pub cash_coverage: BigDecimal,
    pub cash_flow_coverage_ratios: BigDecimal,
    pub debt_ratio: BigDecimal,
    pub debt_service_coverage: BigDecimal,
    pub interest_coverage: BigDecimal,
    pub long_term_debt_to_capitalization: BigDecimal,
    pub operating_cash_flow_ratio: BigDecimal,
    pub total_debt_to_capitalization: BigDecimal,
}

#[derive(Queryable, Debug)]
pub struct PerShareValue {
    pub id: i64,
    pub company_id: i64,
    pub reported_currency_id: Option<i64>,
    pub period_id: Option<i64>,
    pub is_ttm: bool,
    pub from_average: bool,
    pub date: NaiveDate,
    pub book_value_per_share: BigDecimal,
    pub capital_expenditure_per_share: BigDecimal,
    pub cash_per_share: BigDecimal,
    pub earnings_per_share: BigDecimal,
    pub free_cash_flow_per_share: BigDecimal,
    pub operating_cash_flow_per_share: BigDecimal,
    pub sales_per_share: BigDecimal,
    pub tangible_book_value_per_share: BigDecimal,
    pub total_assets_per_share: BigDecimal,
}

#[derive(Queryable, Debug)]
pub struct Period {
    pub id: i64,
    pub year: i32,
    pub period: i32,
    pub created_at: NaiveDateTime,
    pub updated_at: NaiveDateTime,
}

#[derive(Queryable, Debug)]
pub struct PriceToRatio {
    pub id: i64,
    pub company_id: i64,
    pub reported_currency_id: Option<i64>,
    pub period_id: Option<i64>,
    pub is_ttm: bool,
    pub from_average: bool,
    pub date: NaiveDate,
    pub price_to_book_value: BigDecimal,
    pub price_to_cash_flow: BigDecimal,
    pub price_to_earnings: BigDecimal,
    pub price_to_earnings_growth: BigDecimal,
    pub price_to_free_cash_flow: BigDecimal,
    pub price_to_operating_cash_flow: Option<BigDecimal>,
    pub price_to_sales: BigDecimal,
    pub price_to_tangible_assets: BigDecimal,
    pub price_to_total_assets: BigDecimal,
}

#[derive(Queryable, Debug)]
pub struct RentabilityRatio {
    pub id: i64,
    pub company_id: i64,
    pub reported_currency_id: Option<i64>,
    pub period_id: Option<i64>,
    pub is_ttm: bool,
    pub from_average: bool,
    pub date: NaiveDate,
    pub nopat_roic: BigDecimal,
    pub return_on_assets: BigDecimal,
    pub return_on_capital: BigDecimal,
    pub return_on_common_equity: BigDecimal,
    pub return_on_equity: BigDecimal,
    pub return_on_invested_capital: BigDecimal,
    pub return_on_tangible_assets: BigDecimal,
    pub return_on_total_assets: BigDecimal,
    pub rogic: BigDecimal,
}

#[derive(Queryable, Debug)]
pub struct Sector {
    pub id: i64,
    pub name: String,
    pub created_at: NaiveDateTime,
    pub updated_at: NaiveDateTime,
}

#[derive(Queryable, Debug)]
pub struct User {
    pub id: i64,
    pub username: String,
    pub first_name: String,
    pub last_name: String,
    pub email: String,
    pub image: Option<String>,
    pub is_actif: bool,
    pub is_superuser: bool,
    pub is_staff: bool,
    pub is_test: bool,
    pub password: String,
    pub created_at: NaiveDateTime,
    pub updated_at: NaiveDateTime,
}

