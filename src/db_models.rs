// Generated by diesel_ext

#![allow(unused)]
#![allow(clippy::all)]


use chrono::NaiveDate;
use bigdecimal::BigDecimal;
use ipnetwork::IpNetwork;
use chrono::DateTime;
use chrono::offset::Utc;
#[derive(Queryable, Debug, Identifiable)]
pub struct AccountEmailaddres {
    pub id: i32,
    pub email: String,
    pub verified: bool,
    pub primary: bool,
    pub user_id: i64,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct AccountEmailconfirmation {
    pub id: i32,
    pub created: DateTime<Utc>,
    pub sent: Option<DateTime<Utc>>,
    pub key: String,
    pub email_address_id: i32,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct AdminHoneypotLoginattempt {
    pub id: i64,
    pub username: Option<String>,
    pub ip_address: Option<IpNetwork>,
    pub session_key: Option<String>,
    pub user_agent: Option<String>,
    pub timestamp: DateTime<Utc>,
    pub path: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct AnswerComment {
    pub id: i64,
    pub content: String,
    pub created_at: Option<DateTime<Utc>>,
    pub author_id: Option<i64>,
    pub content_related_id: Option<i64>,
    pub updated_at: Option<DateTime<Utc>>,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct Answer {
    pub id: i64,
    pub content: String,
    pub is_accepted: bool,
    pub created_at: DateTime<Utc>,
    pub updated_at: DateTime<Utc>,
    pub total_votes: i32,
    pub question_related_id: i64,
    pub author_id: Option<i64>,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct AnswersDownvote {
    pub id: i64,
    pub answer_id: i64,
    pub user_id: i64,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct AnswersUpvote {
    pub id: i64,
    pub answer_id: i64,
    pub user_id: i64,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct ApiCompaniesRequested {
    pub id: i64,
    pub ip: String,
    pub date: DateTime<Utc>,
    pub path: String,
    pub is_excel: bool,
    pub key_id: String,
    pub search_id: Option<i64>,
    pub user_id: i64,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct ApiEndpoint {
    pub id: i64,
    pub title: String,
    pub slug: String,
    pub url: String,
    pub order: i32,
    pub description: String,
    pub url_example: String,
    pub response_example: String,
    pub date_created: DateTime<Utc>,
    pub is_premium: bool,
    pub is_available: bool,
    pub is_deprecated: bool,
    pub version: String,
    pub date_deprecated: Option<DateTime<Utc>>,
    pub price: i32,
    pub title_related_id: Option<i64>,
    pub response_example_json: Option<serde_json::Value>,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct ApiEndpointsCategory {
    pub id: i64,
    pub title: String,
    pub order: i32,
    pub icon: String,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(key))]
pub struct ApiKey {
    pub ip: Option<String>,
    pub key: String,
    pub in_use: bool,
    pub created: DateTime<Utc>,
    pub removed: Option<DateTime<Utc>>,
    pub limit: i32,
    pub user_id: i64,
    pub subscription_id: Option<i64>,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct ApiReasonKey {
    pub id: i64,
    pub created: DateTime<Utc>,
    pub description: String,
    pub user_id: i64,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct ApiSuperinvestorRequested {
    pub id: i64,
    pub ip: String,
    pub date: DateTime<Utc>,
    pub path: String,
    pub key_id: String,
    pub search_id: Option<i64>,
    pub user_id: i64,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct ApiTermsRequested {
    pub id: i64,
    pub ip: String,
    pub date: DateTime<Utc>,
    pub path: String,
    pub key_id: String,
    pub search_id: Option<i64>,
    pub user_id: i64,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct AssetsCompany {
    pub id: i32,
    pub ticker: String,
    pub name: Option<String>,
    pub website: Option<String>,
    pub state: Option<String>,
    pub ceo: Option<String>,
    pub image: Option<String>,
    pub city: Option<String>,
    pub employees: Option<String>,
    pub address: Option<String>,
    pub zip_code: Option<String>,
    pub cik: Option<String>,
    pub cusip: Option<String>,
    pub isin: Option<String>,
    pub description: Option<String>,
    pub ipoDate: Option<String>,
    pub country_id: Option<i32>,
    pub currency_id: Option<i32>,
    pub exchange_id: Option<i32>,
    pub industry_id: Option<i32>,
    pub sector_id: Option<i32>,
    pub is_trust: bool,
    pub beta: Option<f64>,
    pub is_adr: bool,
    pub is_fund: bool,
    pub last_div: Option<f64>,
    pub is_etf: bool,
    pub no_bs: bool,
    pub no_cfs: bool,
    pub no_incs: bool,
    pub description_translated: bool,
    pub has_logo: bool,
    pub date_updated: bool,
    pub last_update: Option<DateTime<Utc>>,
    pub updated: bool,
    pub error_message: Option<String>,
    pub has_error: bool,
    pub remote_image_cloudinary: String,
    pub remote_image_imagekit: String,
    pub checkings: serde_json::Value,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct AssetsCompaniesAllStatementsFinnhub {
    pub id: i64,
    pub financials: serde_json::Value,
    pub company_id: Option<i64>,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct AssetsCompaniesBalanceSheetStatement {
    pub id: i32,
    pub date: i32,
    pub cash_and_cash_equivalents: Option<f64>,
    pub short_term_investments: Option<f64>,
    pub cash_and_short_term_investments: Option<f64>,
    pub net_receivables: Option<f64>,
    pub inventory: Option<f64>,
    pub other_current_assets: Option<f64>,
    pub total_current_assets: Option<f64>,
    pub property_plant_equipment: Option<f64>,
    pub goodwill: Option<f64>,
    pub intangible_assets: Option<f64>,
    pub goodwill_and_intangible_assets: Option<f64>,
    pub long_term_investments: Option<f64>,
    pub tax_assets: Option<f64>,
    pub other_non_current_assets: Option<f64>,
    pub total_non_current_assets: Option<f64>,
    pub other_assets: Option<f64>,
    pub total_assets: Option<f64>,
    pub accounts_payable: Option<f64>,
    pub short_term_debt: Option<f64>,
    pub tax_payables: Option<f64>,
    pub deferred_revenue: Option<f64>,
    pub other_current_liabilities: Option<f64>,
    pub total_current_liabilities: Option<f64>,
    pub long_term_debt: Option<f64>,
    pub deferred_revenue_non_current: Option<f64>,
    pub deferred_tax_liabilities_non_current: Option<f64>,
    pub other_non_current_liabilities: Option<f64>,
    pub total_non_current_liabilities: Option<f64>,
    pub other_liabilities: Option<f64>,
    pub total_liabilities: Option<f64>,
    pub common_stocks: Option<f64>,
    pub retained_earnings: Option<f64>,
    pub accumulated_other_comprehensive_income_loss: Option<f64>,
    pub othertotal_stockholders_equity: Option<f64>,
    pub total_stockholders_equity: Option<f64>,
    pub total_liabilities_and_total_equity: Option<f64>,
    pub total_investments: Option<f64>,
    pub total_debt: Option<f64>,
    pub net_debt: Option<f64>,
    pub company_id: Option<i32>,
    pub reported_currency_id: Option<i32>,
    pub year: Option<NaiveDate>,
    pub period_id: Option<i64>,
    pub is_ttm: bool,
    pub from_average: bool,
    pub preferred_stocks: Option<f64>,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct AssetsCompaniesBalanceSheetStatementsFinprep {
    pub id: i64,
    pub date: i32,
    pub year: Option<NaiveDate>,
    pub accepted_date: Option<DateTime<Utc>>,
    pub filling_date: Option<NaiveDate>,
    pub final_link: Option<String>,
    pub link: Option<String>,
    pub preferred_stock: Option<f64>,
    pub capital_lease_obligations: Option<f64>,
    pub total_equity: Option<f64>,
    pub property_plant_equipment_net: Option<f64>,
    pub minority_interest: Option<f64>,
    pub cash_and_cash_equivalents: Option<f64>,
    pub short_term_investments: Option<f64>,
    pub cash_and_short_term_investments: Option<f64>,
    pub net_receivables: Option<f64>,
    pub inventory: Option<f64>,
    pub other_current_assets: Option<f64>,
    pub total_current_assets: Option<f64>,
    pub total_liabilities_and_stockholders_equity: Option<f64>,
    pub goodwill: Option<f64>,
    pub intangible_assets: Option<f64>,
    pub goodwill_and_intangible_assets: Option<f64>,
    pub long_term_investments: Option<f64>,
    pub tax_assets: Option<f64>,
    pub other_non_current_assets: Option<f64>,
    pub total_non_current_assets: Option<f64>,
    pub other_assets: Option<f64>,
    pub total_assets: Option<f64>,
    pub account_payables: Option<f64>,
    pub short_term_debt: Option<f64>,
    pub tax_payables: Option<f64>,
    pub deferred_revenue: Option<f64>,
    pub other_current_liabilities: Option<f64>,
    pub total_current_liabilities: Option<f64>,
    pub long_term_debt: Option<f64>,
    pub deferred_revenue_non_current: Option<f64>,
    pub deferred_tax_liabilities_non_current: Option<f64>,
    pub other_non_current_liabilities: Option<f64>,
    pub total_non_current_liabilities: Option<f64>,
    pub other_liabilities: Option<f64>,
    pub total_liabilities: Option<f64>,
    pub common_stock: Option<f64>,
    pub retained_earnings: Option<f64>,
    pub accumulated_other_comprehensive_income_loss: Option<f64>,
    pub othertotal_stockholders_equity: Option<f64>,
    pub total_stockholders_equity: Option<f64>,
    pub total_liabilities_and_total_equity: Option<f64>,
    pub total_investments: Option<f64>,
    pub total_debt: Option<f64>,
    pub net_debt: Option<f64>,
    pub company_id: Option<i64>,
    pub period_id: Option<i64>,
    pub reported_currency_id: Option<i64>,
    pub calendar_year: Option<i32>,
    pub cik: Option<String>,
    pub symbol: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct AssetsCompaniesBalanceSheetStatementsYahooquery {
    pub id: i64,
    pub date: i32,
    pub year: Option<NaiveDate>,
    pub company_id: Option<i64>,
    pub period_id: Option<i64>,
    pub reported_currency_id: Option<i64>,
    pub financials: serde_json::Value,
    pub accounts_payable: Option<f64>,
    pub accounts_receivable: Option<f64>,
    pub accumulated_depreciation: Option<f64>,
    pub as_of_date: Option<DateTime<Utc>>,
    pub available_for_sale_securities: Option<f64>,
    pub capital_stock: Option<f64>,
    pub cash_and_cash_equivalents: Option<f64>,
    pub cash_cash_equivalents_and_short_term_investments: Option<f64>,
    pub cash_equivalents: Option<f64>,
    pub cash_financial: Option<f64>,
    pub commercial_paper: Option<f64>,
    pub common_stock: Option<f64>,
    pub common_stock_equity: Option<f64>,
    pub currency_code: Option<String>,
    pub current_assets: Option<f64>,
    pub current_debt: Option<f64>,
    pub current_debt_and_capital_lease_obligation: Option<f64>,
    pub current_deferred_liabilities: Option<f64>,
    pub current_deferred_revenue: Option<f64>,
    pub current_liabilities: Option<f64>,
    pub gains_losses_not_affecting_retained_earnings: Option<f64>,
    pub gross_ppe: Option<f64>,
    pub inventory: Option<f64>,
    pub invested_capital: Option<f64>,
    pub investmentin_financial_assets: Option<f64>,
    pub investments_and_advances: Option<f64>,
    pub land_and_improvements: Option<f64>,
    pub leases: Option<f64>,
    pub long_term_debt: Option<f64>,
    pub long_term_debt_and_capital_lease_obligation: Option<f64>,
    pub machinery_furniture_equipment: Option<f64>,
    pub net_debt: Option<f64>,
    pub net_ppe: Option<f64>,
    pub net_tangible_assets: Option<f64>,
    pub non_current_deferred_liabilities: Option<f64>,
    pub non_current_deferred_revenue: Option<f64>,
    pub non_current_deferred_taxes_liabilities: Option<f64>,
    pub ordinary_shares_number: Option<f64>,
    pub other_current_assets: Option<f64>,
    pub other_current_borrowings: Option<f64>,
    pub other_current_liabilities: Option<f64>,
    pub other_non_current_assets: Option<f64>,
    pub other_non_current_liabilities: Option<f64>,
    pub other_receivables: Option<f64>,
    pub other_short_term_investments: Option<f64>,
    pub payables: Option<f64>,
    pub payables_and_accrued_expenses: Option<f64>,
    pub period_type: Option<String>,
    pub properties: Option<f64>,
    pub receivables: Option<f64>,
    pub retained_earnings: Option<f64>,
    pub share_issued: Option<f64>,
    pub stockholders_equity: Option<f64>,
    pub tangible_book_value: Option<f64>,
    pub total_assets: Option<f64>,
    pub total_capitalization: Option<f64>,
    pub total_debt: Option<f64>,
    pub total_equity_gross_minority_interest: Option<f64>,
    pub total_liabilities_net_minority_interest: Option<f64>,
    pub total_non_current_assets: Option<f64>,
    pub total_non_current_liabilities_net_minority_interest: Option<f64>,
    pub tradeand_other_payables_non_current: Option<f64>,
    pub working_capital: Option<f64>,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct AssetsCompaniesBalanceSheetStatementsYfinance {
    pub id: i64,
    pub date: i32,
    pub year: Option<NaiveDate>,
    pub company_id: Option<i64>,
    pub period_id: Option<i64>,
    pub reported_currency_id: Option<i64>,
    pub financials: serde_json::Value,
    pub accounts_payable: Option<f64>,
    pub cash: Option<f64>,
    pub common_stock: Option<f64>,
    pub deferred_long_term_asset_charges: Option<f64>,
    pub gains_losses_not_affecting_retained_earnings: Option<f64>,
    pub good_will: Option<f64>,
    pub intangible_assets: Option<f64>,
    pub inventory: Option<f64>,
    pub long_term_debt: Option<f64>,
    pub long_term_investments: Option<f64>,
    pub net_receivables: Option<f64>,
    pub net_tangible_assets: Option<f64>,
    pub other_assets: Option<f64>,
    pub other_current_assets: Option<f64>,
    pub other_current_liab: Option<f64>,
    pub other_liab: Option<f64>,
    pub other_stockholder_equity: Option<f64>,
    pub property_plant_equipment: Option<f64>,
    pub retained_earnings: Option<f64>,
    pub short_long_term_debt: Option<f64>,
    pub short_term_investments: Option<f64>,
    pub total_assets: Option<f64>,
    pub total_current_assets: Option<f64>,
    pub total_current_liabilities: Option<f64>,
    pub total_liab: Option<f64>,
    pub total_stockholder_equity: Option<f64>,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct AssetsCompaniesCashflowStatement {
    pub id: i32,
    pub date: i32,
    pub operating_activities_cf: Option<f64>,
    pub depreciation_amortization: Option<f64>,
    pub deferred_income_tax: Option<f64>,
    pub stock_based_compensation: Option<f64>,
    pub change_in_working_capital: Option<f64>,
    pub accounts_receivable: Option<f64>,
    pub inventory: Option<f64>,
    pub accounts_payable: Option<f64>,
    pub other_working_capital: Option<f64>,
    pub other_non_cash_items: Option<f64>,
    pub investing_activities_cf: Option<f64>,
    pub financing_activities_cf: Option<f64>,
    pub acquisitions_net: Option<f64>,
    pub purchases_investments: Option<f64>,
    pub sales_maturities_investments: Option<f64>,
    pub other_investing_activites: Option<f64>,
    pub investments_property_plant_equipment: Option<f64>,
    pub debt_repayment: Option<f64>,
    pub common_stock_issued: Option<f64>,
    pub common_stock_repurchased: Option<f64>,
    pub dividends_paid: Option<f64>,
    pub other_financing_activities: Option<f64>,
    pub net_change_cash: Option<f64>,
    pub effect_forex_exchange: Option<f64>,
    pub net_income: Option<f64>,
    pub cash_end_period: Option<f64>,
    pub cash_beginning_period: Option<f64>,
    pub operating_cf: Option<f64>,
    pub capex: Option<f64>,
    pub fcf: Option<f64>,
    pub company_id: Option<i32>,
    pub reported_currency_id: Option<i32>,
    pub year: Option<NaiveDate>,
    pub period_id: Option<i64>,
    pub is_ttm: bool,
    pub from_average: bool,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct AssetsCompaniesCashflowStatementsFinprep {
    pub id: i64,
    pub date: i32,
    pub year: Option<NaiveDate>,
    pub accepted_date: Option<DateTime<Utc>>,
    pub filling_date: Option<NaiveDate>,
    pub final_link: Option<String>,
    pub link: Option<String>,
    pub net_income: Option<f64>,
    pub depreciation_and_amortization: Option<f64>,
    pub deferred_income_tax: Option<f64>,
    pub stock_based_compensation: Option<f64>,
    pub change_in_working_capital: Option<f64>,
    pub accounts_receivables: Option<f64>,
    pub inventory: Option<f64>,
    pub accounts_payables: Option<f64>,
    pub other_working_capital: Option<f64>,
    pub other_non_cash_items: Option<f64>,
    pub net_change_in_cash: Option<f64>,
    pub net_cash_used_for_investing_activites: Option<f64>,
    pub acquisitions_net: Option<f64>,
    pub purchases_of_investments: Option<f64>,
    pub sales_maturities_of_investments: Option<f64>,
    pub other_investing_activites: Option<f64>,
    pub net_cash_provided_by_operating_activities: Option<f64>,
    pub debt_repayment: Option<f64>,
    pub common_stock_issued: Option<f64>,
    pub common_stock_repurchased: Option<f64>,
    pub dividends_paid: Option<f64>,
    pub other_financing_activites: Option<f64>,
    pub investments_in_property_plant_and_equipment: Option<f64>,
    pub effect_of_forex_changes_on_cash: Option<f64>,
    pub net_cash_used_provided_by_financing_activities: Option<f64>,
    pub cash_at_end_of_period: Option<f64>,
    pub cash_at_beginning_of_period: Option<f64>,
    pub operating_cash_flow: Option<f64>,
    pub capital_expenditure: Option<f64>,
    pub free_cash_flow: Option<f64>,
    pub company_id: Option<i64>,
    pub period_id: Option<i64>,
    pub reported_currency_id: Option<i64>,
    pub calendar_year: Option<i32>,
    pub cik: Option<String>,
    pub symbol: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct AssetsCompaniesCashflowStatementsYahooquery {
    pub id: i64,
    pub date: i32,
    pub year: Option<NaiveDate>,
    pub company_id: Option<i64>,
    pub period_id: Option<i64>,
    pub reported_currency_id: Option<i64>,
    pub financials: serde_json::Value,
    pub as_of_date: Option<DateTime<Utc>>,
    pub beginning_cash_position: Option<f64>,
    pub capital_expenditure: Option<f64>,
    pub cash_dividends_paid: Option<f64>,
    pub cash_flow_from_continuing_financing_activities: Option<f64>,
    pub cash_flow_from_continuing_investing_activities: Option<f64>,
    pub cash_flow_from_continuing_operating_activities: Option<f64>,
    pub change_in_account_payable: Option<f64>,
    pub change_in_cash_supplemental_as_reported: Option<f64>,
    pub change_in_inventory: Option<f64>,
    pub change_in_other_current_assets: Option<f64>,
    pub change_in_other_current_liabilities: Option<f64>,
    pub change_in_other_working_capital: Option<f64>,
    pub change_in_payable: Option<f64>,
    pub change_in_payables_and_accrued_expense: Option<f64>,
    pub change_in_receivables: Option<f64>,
    pub change_in_working_capital: Option<f64>,
    pub changes_in_account_receivables: Option<f64>,
    pub changes_in_cash: Option<f64>,
    pub common_stock_dividend_paid: Option<f64>,
    pub common_stock_issuance: Option<f64>,
    pub common_stock_payments: Option<f64>,
    pub currency_code: Option<String>,
    pub deferred_income_tax: Option<f64>,
    pub deferred_tax: Option<f64>,
    pub depreciation_amortization_depletion: Option<f64>,
    pub depreciation_and_amortization: Option<f64>,
    pub end_cash_position: Option<f64>,
    pub financing_cash_flow: Option<f64>,
    pub free_cash_flow: Option<f64>,
    pub income_tax_paid_supplemental_data: Option<f64>,
    pub interest_paid_supplemental_data: Option<f64>,
    pub investing_cash_flow: Option<f64>,
    pub issuance_of_capital_stock: Option<f64>,
    pub issuance_of_debt: Option<f64>,
    pub long_term_debt_issuance: Option<f64>,
    pub long_term_debt_payments: Option<f64>,
    pub net_business_purchase_and_sale: Option<f64>,
    pub net_common_stock_issuance: Option<f64>,
    pub net_income: Option<f64>,
    pub net_income_from_continuing_operations: Option<f64>,
    pub net_investment_purchase_and_sale: Option<f64>,
    pub net_issuance_payments_of_debt: Option<f64>,
    pub net_long_term_debt_issuance: Option<f64>,
    pub net_other_financing_charges: Option<f64>,
    pub net_other_investing_changes: Option<f64>,
    pub net_ppe_purchase_and_sale: Option<f64>,
    pub net_short_term_debt_issuance: Option<f64>,
    pub operating_cash_flow: Option<f64>,
    pub other_non_cash_items: Option<f64>,
    pub period_type: Option<String>,
    pub purchase_of_business: Option<f64>,
    pub purchase_of_investment: Option<f64>,
    pub purchase_of_ppe: Option<f64>,
    pub repayment_of_debt: Option<f64>,
    pub repurchase_of_capital_stock: Option<f64>,
    pub sale_of_investment: Option<f64>,
    pub short_term_debt_payments: Option<f64>,
    pub stock_based_compensation: Option<f64>,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct AssetsCompaniesCashflowStatementsYfinance {
    pub id: i64,
    pub date: i32,
    pub year: Option<NaiveDate>,
    pub company_id: Option<i64>,
    pub period_id: Option<i64>,
    pub reported_currency_id: Option<i64>,
    pub financials: serde_json::Value,
    pub capital_expenditures: Option<f64>,
    pub change_in_cash: Option<f64>,
    pub change_to_account_receivables: Option<f64>,
    pub change_to_inventory: Option<f64>,
    pub change_to_liabilities: Option<f64>,
    pub change_to_netincome: Option<f64>,
    pub change_to_operating_activities: Option<f64>,
    pub depreciation: Option<f64>,
    pub dividends_paid: Option<f64>,
    pub effect_of_exchange_rate: Option<f64>,
    pub investments: Option<f64>,
    pub issuance_of_stock: Option<f64>,
    pub net_borrowings: Option<f64>,
    pub net_income: Option<f64>,
    pub other_cashflows_from_financing_activities: Option<f64>,
    pub other_cashflows_from_investing_activities: Option<f64>,
    pub repurchase_of_stock: Option<f64>,
    pub total_cash_from_financing_activities: Option<f64>,
    pub total_cash_from_operating_activities: Option<f64>,
    pub total_cashflows_from_investing_activities: Option<f64>,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct AssetsCompaniesEficiencyRatio {
    pub id: i32,
    pub date: i32,
    pub asset_turnover: Option<f64>,
    pub inventory_turnover: Option<f64>,
    pub fixed_asset_turnover: Option<f64>,
    pub accounts_payable_turnover: Option<f64>,
    pub cash_conversion_cycle: Option<f64>,
    pub days_inventory_outstanding: Option<f64>,
    pub days_payables_outstanding: Option<f64>,
    pub days_sales_outstanding: Option<f64>,
    pub free_cashflow_to_operating_cashflow: Option<f64>,
    pub operating_cycle: Option<f64>,
    pub company_id: Option<i32>,
    pub year: Option<NaiveDate>,
    pub cash_conversion_ratio: Option<f64>,
    pub period_id: Option<i64>,
    pub reported_currency_id: Option<i64>,
    pub is_ttm: bool,
    pub from_average: bool,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct AssetsCompaniesEnterpriseValueRatio {
    pub id: i32,
    pub date: i32,
    pub enterprise_value: Option<f64>,
    pub ev_fcf: Option<f64>,
    pub ev_operating_cf: Option<f64>,
    pub ev_sales: Option<f64>,
    pub company_equity_multiplier: Option<f64>,
    pub ev_multiple: Option<f64>,
    pub company_id: Option<i32>,
    pub market_cap: Option<f64>,
    pub year: Option<NaiveDate>,
    pub period_id: Option<i64>,
    pub reported_currency_id: Option<i64>,
    pub is_ttm: bool,
    pub from_average: bool,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct AssetsCompaniesFreecashflowRatio {
    pub id: i32,
    pub date: i32,
    pub fcf_equity: Option<f64>,
    pub unlevered_fcf: Option<f64>,
    pub unlevered_fcf_ebit: Option<f64>,
    pub owners_earnings: Option<f64>,
    pub company_id: Option<i32>,
    pub year: Option<NaiveDate>,
    pub period_id: Option<i64>,
    pub reported_currency_id: Option<i64>,
    pub is_ttm: bool,
    pub from_average: bool,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct AssetsCompaniesGrowth {
    pub id: i32,
    pub date: i32,
    pub revenue_growth: Option<f64>,
    pub cost_revenue_growth: Option<f64>,
    pub operating_expenses_growth: Option<f64>,
    pub net_income_growth: Option<f64>,
    pub shares_buyback: Option<f64>,
    pub eps_growth: Option<f64>,
    pub fcf_growth: Option<f64>,
    pub owners_earnings_growth: Option<f64>,
    pub capex_growth: Option<f64>,
    pub rd_expenses_growth: Option<f64>,
    pub company_id: Option<i32>,
    pub year: Option<NaiveDate>,
    pub period_id: Option<i64>,
    pub reported_currency_id: Option<i64>,
    pub is_ttm: bool,
    pub from_average: bool,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct AssetsCompaniesIncomeStatement {
    pub id: i32,
    pub date: i32,
    pub revenue: Option<f64>,
    pub cost_of_revenue: Option<f64>,
    pub gross_profit: Option<f64>,
    pub other_expenses: Option<f64>,
    pub general_administrative_expenses: Option<f64>,
    pub rd_expenses: Option<f64>,
    pub selling_marketing_expenses: Option<f64>,
    pub operating_income: Option<f64>,
    pub net_total_other_income_expenses: Option<f64>,
    pub cost_and_expenses: Option<f64>,
    pub interest_expense: Option<f64>,
    pub depreciation_amortization: Option<f64>,
    pub ebitda: Option<f64>,
    pub operating_expenses: Option<f64>,
    pub sga_expenses: Option<f64>,
    pub income_before_tax: Option<f64>,
    pub income_tax_expenses: Option<f64>,
    pub net_income: Option<f64>,
    pub weighted_average_diluated_shares_outstanding: Option<f64>,
    pub weighted_average_shares_outstanding: Option<f64>,
    pub company_id: Option<i32>,
    pub reported_currency_id: Option<i32>,
    pub year: Option<NaiveDate>,
    pub period_id: Option<i64>,
    pub is_ttm: bool,
    pub from_average: bool,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct AssetsCompaniesIncomeStatementsFinprep {
    pub id: i64,
    pub date: i32,
    pub year: Option<NaiveDate>,
    pub accepted_date: Option<DateTime<Utc>>,
    pub filling_date: Option<NaiveDate>,
    pub final_link: Option<String>,
    pub link: Option<String>,
    pub revenue: Option<f64>,
    pub cost_of_revenue: Option<f64>,
    pub ebitdaratio: Option<f64>,
    pub eps: Option<f64>,
    pub epsdiluted: Option<f64>,
    pub gross_profit_ratio: Option<f64>,
    pub income_before_tax_ratio: Option<f64>,
    pub net_income_ratio: Option<f64>,
    pub operating_income_ratio: Option<f64>,
    pub gross_profit: Option<f64>,
    pub research_and_development_expenses: Option<f64>,
    pub general_and_administrative_expenses: Option<f64>,
    pub selling_and_marketing_expenses: Option<f64>,
    pub selling_general_and_administrative_expenses: Option<f64>,
    pub other_expenses: Option<f64>,
    pub operating_expenses: Option<f64>,
    pub cost_and_expenses: Option<f64>,
    pub interest_expense: Option<f64>,
    pub depreciation_and_amortization: Option<f64>,
    pub ebitda: Option<f64>,
    pub operating_income: Option<f64>,
    pub interest_income: Option<f64>,
    pub income_before_tax: Option<f64>,
    pub income_tax_expense: Option<f64>,
    pub net_income: Option<f64>,
    pub weighted_average_shs_out: Option<f64>,
    pub total_other_income_expenses_net: Option<f64>,
    pub company_id: Option<i64>,
    pub period_id: Option<i64>,
    pub reported_currency_id: Option<i64>,
    pub calendar_year: Option<i32>,
    pub cik: Option<String>,
    pub symbol: Option<String>,
    pub weighted_average_shs_out_dil: Option<f64>,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct AssetsCompaniesIncomeStatementsYahooquery {
    pub id: i64,
    pub date: i32,
    pub year: Option<NaiveDate>,
    pub company_id: Option<i64>,
    pub period_id: Option<i64>,
    pub reported_currency_id: Option<i64>,
    pub financials: serde_json::Value,
    pub as_of_date: Option<DateTime<Utc>>,
    pub basic_average_shares: Option<f64>,
    pub basic_eps: Option<f64>,
    pub cost_of_revenue: Option<f64>,
    pub currency_code: Option<String>,
    pub diluted_average_shares: Option<f64>,
    pub diluted_eps: Option<f64>,
    pub diluted_ni_availto_com_stockholders: Option<f64>,
    pub ebit: Option<f64>,
    pub ebitda: Option<f64>,
    pub gross_profit: Option<f64>,
    pub interest_expense: Option<f64>,
    pub interest_expense_non_operating: Option<f64>,
    pub interest_income: Option<f64>,
    pub interest_income_non_operating: Option<f64>,
    pub net_income: Option<f64>,
    pub net_income_common_stockholders: Option<f64>,
    pub net_income_continuous_operations: Option<f64>,
    pub net_income_from_continuing_and_discontinued_operation: Option<f64>,
    pub net_income_from_continuing_operation_net_minority_interest: Option<f64>,
    pub net_income_including_noncontrolling_interests: Option<f64>,
    pub net_interest_income: Option<f64>,
    pub net_non_operating_interest_income_expense: Option<f64>,
    pub normalized_ebitda: Option<f64>,
    pub normalized_income: Option<f64>,
    pub operating_expense: Option<f64>,
    pub operating_income: Option<f64>,
    pub operating_revenue: Option<f64>,
    pub other_income_expense: Option<f64>,
    pub other_non_operating_income_expenses: Option<f64>,
    pub period_type: Option<String>,
    pub pretax_income: Option<f64>,
    pub reconciled_cost_of_revenue: Option<f64>,
    pub reconciled_depreciation: Option<f64>,
    pub research_and_development: Option<f64>,
    pub selling_general_and_administration: Option<f64>,
    pub tax_effect_of_unusual_items: Option<f64>,
    pub tax_provision: Option<f64>,
    pub tax_rate_for_calcs: Option<f64>,
    pub total_expenses: Option<f64>,
    pub total_operating_income_as_reported: Option<f64>,
    pub total_revenue: Option<f64>,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct AssetsCompaniesIncomeStatementsYfinance {
    pub id: i64,
    pub date: i32,
    pub year: Option<NaiveDate>,
    pub company_id: Option<i64>,
    pub period_id: Option<i64>,
    pub reported_currency_id: Option<i64>,
    pub financials: serde_json::Value,
    pub cost_of_revenue: Option<f64>,
    pub discontinued_operations: Option<f64>,
    pub ebit: Option<f64>,
    pub effect_of_accounting_charges: Option<f64>,
    pub extraordinary_items: Option<f64>,
    pub gross_profit: Option<f64>,
    pub income_before_tax: Option<f64>,
    pub income_tax_expense: Option<f64>,
    pub interest_expense: Option<f64>,
    pub minority_interest: Option<f64>,
    pub net_income: Option<f64>,
    pub net_income_applicable_to_common_shares: Option<f64>,
    pub net_income_from_continuing_ops: Option<f64>,
    pub non_recurring: Option<f64>,
    pub operating_income: Option<f64>,
    pub other_items: Option<f64>,
    pub other_operating_expenses: Option<f64>,
    pub research_development: Option<f64>,
    pub selling_general_administrative: Option<f64>,
    pub total_operating_expenses: Option<f64>,
    pub total_other_income_expense_net: Option<f64>,
    pub total_revenue: Option<f64>,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct AssetsCompaniesKeyStatsYahooquery {
    pub id: i64,
    pub date: i32,
    pub year: Option<NaiveDate>,
    pub financials: serde_json::Value,
    pub max_age: Option<f64>,
    pub price_hint: Option<f64>,
    pub enterprise_value: Option<f64>,
    pub forward_pe: Option<f64>,
    pub profit_margins: Option<f64>,
    pub float_shares: Option<f64>,
    pub shares_outstanding: Option<f64>,
    pub shares_short: Option<f64>,
    pub shares_short_prior_month: Option<f64>,
    pub shares_short_previous_month_date: Option<DateTime<Utc>>,
    pub date_short_interest: Option<DateTime<Utc>>,
    pub shares_percent_shares_out: Option<f64>,
    pub held_percent_insiders: Option<f64>,
    pub held_percent_institutions: Option<f64>,
    pub short_ratio: Option<f64>,
    pub short_percent_of_float: Option<f64>,
    pub beta: Option<f64>,
    pub category: Option<f64>,
    pub book_value: Option<f64>,
    pub price_to_book: Option<f64>,
    pub fund_family: Option<f64>,
    pub legal_type: Option<f64>,
    pub last_fiscal_year_end: Option<DateTime<Utc>>,
    pub next_fiscal_year_end: Option<DateTime<Utc>>,
    pub most_recent_quarter: Option<DateTime<Utc>>,
    pub earnings_quarterly_growth: Option<f64>,
    pub net_income_to_common: Option<f64>,
    pub trailing_eps: Option<f64>,
    pub forward_eps: Option<f64>,
    pub peg_ratio: Option<f64>,
    pub last_split_factor: Option<String>,
    pub last_split_date: Option<DateTime<Utc>>,
    pub enterprise_to_revenue: Option<f64>,
    pub enterprise_to_ebitda: Option<f64>,
    pub week_change_52: Option<f64>,
    pub sand_p52_week_change: Option<f64>,
    pub company_id: Option<i64>,
    pub period_id: Option<i64>,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct AssetsCompaniesLiquidityRatio {
    pub id: i32,
    pub date: i32,
    pub cash_ratio: Option<f64>,
    pub current_ratio: Option<f64>,
    pub quick_ratio: Option<f64>,
    pub operating_cashflow_ratio: Option<f64>,
    pub debt_to_equity: Option<f64>,
    pub company_id: Option<i32>,
    pub year: Option<NaiveDate>,
    pub period_id: Option<i64>,
    pub reported_currency_id: Option<i64>,
    pub is_ttm: bool,
    pub from_average: bool,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct AssetsCompaniesMarginsRatio {
    pub id: i32,
    pub date: i32,
    pub gross_margin: Option<f64>,
    pub ebitda_margin: Option<f64>,
    pub net_income_margin: Option<f64>,
    pub fcf_margin: Option<f64>,
    pub fcf_equity_to_net_income: Option<f64>,
    pub unlevered_fcf_to_net_income: Option<f64>,
    pub unlevered_fcf_ebit_to_net_income: Option<f64>,
    pub owners_earnings_to_net_income: Option<f64>,
    pub company_id: Option<i32>,
    pub year: Option<NaiveDate>,
    pub period_id: Option<i64>,
    pub reported_currency_id: Option<i64>,
    pub is_ttm: bool,
    pub from_average: bool,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct AssetsCompaniesNonGaap {
    pub id: i32,
    pub date: i32,
    pub normalized_income: Option<f64>,
    pub effective_tax_rate: Option<f64>,
    pub nopat: Option<f64>,
    pub net_working_cap: Option<f64>,
    pub average_inventory: Option<f64>,
    pub average_accounts_payable: Option<f64>,
    pub dividend_yield: Option<f64>,
    pub earnings_yield: Option<f64>,
    pub fcf_yield: Option<f64>,
    pub income_quality: Option<f64>,
    pub invested_capital: Option<f64>,
    pub market_cap: Option<f64>,
    pub net_current_asset_value: Option<f64>,
    pub payout_ratio: Option<f64>,
    pub tangible_assets: Option<f64>,
    pub company_id: Option<i32>,
    pub retention_ratio: Option<f64>,
    pub year: Option<NaiveDate>,
    pub period_id: Option<i64>,
    pub reported_currency_id: Option<i64>,
    pub is_ttm: bool,
    pub from_average: bool,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct AssetsCompaniesOperationsRiskRatio {
    pub id: i32,
    pub date: i32,
    pub asset_coverage_ratio: Option<f64>,
    pub cash_flow_coverage_ratios: Option<f64>,
    pub interest_coverage: Option<f64>,
    pub operating_cashflow_ratio: Option<f64>,
    pub debt_ratio: Option<f64>,
    pub long_term_debt_to_capitalization: Option<f64>,
    pub total_debt_to_capitalization: Option<f64>,
    pub company_id: Option<i32>,
    pub cash_coverage: Option<f64>,
    pub debt_service_coverage: Option<f64>,
    pub year: Option<NaiveDate>,
    pub period_id: Option<i64>,
    pub reported_currency_id: Option<i64>,
    pub is_ttm: bool,
    pub from_average: bool,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct AssetsCompaniesPerShareValue {
    pub id: i32,
    pub date: i32,
    pub sales_ps: Option<f64>,
    pub book_ps: Option<f64>,
    pub tangible_ps: Option<f64>,
    pub fcf_ps: Option<f64>,
    pub eps: Option<f64>,
    pub cash_ps: Option<f64>,
    pub operating_cf_ps: Option<f64>,
    pub capex_ps: Option<f64>,
    pub company_id: Option<i32>,
    pub total_assets_ps: Option<f64>,
    pub year: Option<NaiveDate>,
    pub period_id: Option<i64>,
    pub reported_currency_id: Option<i64>,
    pub is_ttm: bool,
    pub from_average: bool,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct AssetsCompaniesPriceToRatio {
    pub id: i32,
    pub date: i32,
    pub price_book: Option<f64>,
    pub price_cf: Option<f64>,
    pub price_earnings: Option<f64>,
    pub price_earnings_growth: Option<f64>,
    pub price_fcf: Option<f64>,
    pub price_operating_cf: Option<f64>,
    pub price_sales: Option<f64>,
    pub company_id: Option<i32>,
    pub price_tangible_assets: Option<f64>,
    pub price_total_assets: Option<f64>,
    pub year: Option<NaiveDate>,
    pub period_id: Option<i64>,
    pub reported_currency_id: Option<i64>,
    pub is_ttm: bool,
    pub from_average: bool,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct AssetsCompaniesRentabilityRatio {
    pub id: i32,
    pub date: i32,
    pub roa: Option<f64>,
    pub roe: Option<f64>,
    pub roc: Option<f64>,
    pub roce: Option<f64>,
    pub rota: Option<f64>,
    pub roic: Option<f64>,
    pub company_id: Option<i32>,
    pub nopat_roic: Option<f64>,
    pub rogic: Option<f64>,
    pub year: Option<NaiveDate>,
    pub period_id: Option<i64>,
    pub reported_currency_id: Option<i64>,
    pub is_ttm: bool,
    pub from_average: bool,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct AssetsCompaniesStockPrice {
    pub id: i32,
    pub price: Option<f64>,
    pub company_related_id: Option<i32>,
    pub date: i32,
    pub year: DateTime<Utc>,
    pub data_source: String,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct AssetsCompaniesUpdatesLog {
    pub id: i64,
    pub date: Option<DateTime<Utc>>,
    pub where_: String,
    pub had_error: bool,
    pub error_message: Option<String>,
    pub company_id: Option<i64>,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct AssetsCountry {
    pub id: i32,
    pub country: Option<String>,
    pub iso: Option<String>,
    pub alpha_2_code: Option<String>,
    pub alpha_3_code: Option<String>,
    pub name: Option<String>,
    pub spanish_name: Option<String>,
    pub created_at: DateTime<Utc>,
    pub updated_at: DateTime<Utc>,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct AssetsCurrency {
    pub id: i32,
    pub currency: Option<String>,
    pub decimals: i32,
    pub iso: Option<String>,
    pub name: Option<String>,
    pub symbol: Option<String>,
    pub spanish_name: Option<String>,
    pub accronym: Option<String>,
    pub created_at: DateTime<Utc>,
    pub updated_at: DateTime<Utc>,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct AssetsCurrenciesCountry {
    pub id: i64,
    pub currency_id: i64,
    pub country_id: i64,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct AssetsExchange {
    pub id: i32,
    pub exchange_ticker: Option<String>,
    pub exchange: Option<String>,
    pub country_id: Option<i32>,
    pub main_org_id: Option<i32>,
    pub data_source: String,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct AssetsExchangesOrganisation {
    pub id: i32,
    pub name: Option<String>,
    pub image: Option<String>,
    pub sub_exchange1: Option<String>,
    pub sub_exchange2: Option<String>,
    pub order: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct AssetsIndustry {
    pub id: i32,
    pub industry: Option<String>,
    pub industry_spanish: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct AssetsInstitutionalOrganization {
    pub id: i64,
    pub name: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct AssetsPeriod {
    pub id: i64,
    pub period: Option<i32>,
    pub year: Option<i32>,
    pub created_at: DateTime<Utc>,
    pub updated_at: DateTime<Utc>,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct AssetsSector {
    pub id: i32,
    pub sector: Option<String>,
    pub sector_spanish: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct AssetsTopInstitutionalOwnership {
    pub id: i64,
    pub date: i32,
    pub year: Option<NaiveDate>,
    pub percentage_held: Option<f64>,
    pub position: Option<f64>,
    pub value: Option<f64>,
    pub company_id: Option<i64>,
    pub organization_id: Option<i64>,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct AuthGroup {
    pub id: i32,
    pub name: String,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct AuthGroupPermission {
    pub id: i64,
    pub group_id: i32,
    pub permission_id: i32,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct AuthPermission {
    pub id: i32,
    pub name: String,
    pub content_type_id: i32,
    pub codename: String,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(key))]
pub struct AuthtokenToken {
    pub key: String,
    pub created: DateTime<Utc>,
    pub user_id: i64,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct BlogComment {
    pub id: i64,
    pub content: String,
    pub created_at: Option<DateTime<Utc>>,
    pub author_id: Option<i64>,
    pub content_related_id: Option<i64>,
    pub updated_at: Option<DateTime<Utc>>,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct BlogPost {
    pub id: i64,
    pub title: Option<String>,
    pub slug: Option<String>,
    pub created_at: Option<DateTime<Utc>>,
    pub updated_at: Option<DateTime<Utc>>,
    pub total_votes: i32,
    pub total_views: i32,
    pub times_shared: i32,
    pub resume: String,
    pub published_at: DateTime<Utc>,
    pub status: i32,
    pub thumbnail: Option<String>,
    pub send_as_newsletter: bool,
    pub content: String,
    pub non_thumbnail_url: Option<String>,
    pub in_text_image: bool,
    pub published_correctly: bool,
    pub date_to_publish: Option<DateTime<Utc>>,
    pub author_id: Option<i64>,
    pub category_id: Option<i64>,
    pub meta_information_id: Option<i64>,
    pub checkings: serde_json::Value,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct BlogPostDownvote {
    pub id: i64,
    pub publicblog_id: i64,
    pub user_id: i64,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct BlogPostTag {
    pub id: i64,
    pub publicblog_id: i64,
    pub tag_id: i64,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct BlogPostUpvote {
    pub id: i64,
    pub publicblog_id: i64,
    pub user_id: i64,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct BusinessCustomer {
    pub id: i64,
    pub created_at: DateTime<Utc>,
    pub stripe_id: Option<String>,
    pub user_id: Option<i64>,
    pub for_testing: bool,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct BusinessProduct {
    pub id: i64,
    pub title: String,
    pub slug: Option<String>,
    pub stripe_id: Option<String>,
    pub description: Option<String>,
    pub image: Option<String>,
    pub video: Option<String>,
    pub created_at: DateTime<Utc>,
    pub updated_at: Option<DateTime<Utc>>,
    pub visits: i32,
    pub is_active: bool,
    pub for_testing: bool,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct BusinessProductsComment {
    pub id: i64,
    pub content: String,
    pub created_at: Option<DateTime<Utc>>,
    pub rating: Option<i32>,
    pub author_id: Option<i64>,
    pub content_related_id: Option<i64>,
    pub updated_at: Option<DateTime<Utc>>,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct BusinessProductsComplementary {
    pub id: i64,
    pub image: Option<String>,
    pub video: Option<String>,
    pub title: String,
    pub slug: Option<String>,
    pub price: Option<f64>,
    pub payment_type: String,
    pub stripe_id: Option<String>,
    pub description: Option<String>,
    pub is_active: bool,
    pub subscription_period: String,
    pub subscription_interval: i32,
    pub created_at: DateTime<Utc>,
    pub updated_at: Option<DateTime<Utc>>,
    pub extras: serde_json::Value,
    pub currency_id: Option<i64>,
    pub product_id: Option<i64>,
    pub product_result: String,
    pub purchase_result: String,
    pub for_testing: bool,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct BusinessProductsComplementaryPaymentLink {
    pub id: i64,
    pub link: Option<String>,
    pub stripe_id: Option<String>,
    pub created_at: DateTime<Utc>,
    pub updated_at: Option<DateTime<Utc>>,
    pub for_website: bool,
    pub product_complementary_id: Option<i64>,
    pub promotion_id: Option<i64>,
    pub title: Option<String>,
    pub for_testing: bool,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct BusinessProductsDiscount {
    pub id: i64,
    pub start_date: Option<DateTime<Utc>>,
    pub end_date: Option<DateTime<Utc>>,
    pub discount: Option<f64>,
    pub is_percentage: bool,
    pub is_active: bool,
    pub product_id: Option<i64>,
    pub product_complementary_id: Option<i64>,
    pub promotion_id: Option<i64>,
    pub for_testing: bool,
    pub stripe_id: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct BusinessProductsSubscriber {
    pub id: i64,
    pub created_at: DateTime<Utc>,
    pub updated_at: Option<DateTime<Utc>>,
    pub is_active: bool,
    pub product_id: Option<i64>,
    pub product_complementary_id: Option<i64>,
    pub subscriber_id: Option<i64>,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct BusinessStripeWebhookResponse {
    pub id: i64,
    pub full_response: serde_json::Value,
    pub created_at: DateTime<Utc>,
    pub stripe_id: Option<String>,
    pub customer_id: Option<i64>,
    pub product_id: Option<i64>,
    pub product_complementary_id: Option<i64>,
    pub for_testing: bool,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct BusinessTransaction {
    pub id: i64,
    pub created_at: DateTime<Utc>,
    pub payment_method: String,
    pub final_amount: Option<f64>,
    pub stripe_response: Option<serde_json::Value>,
    pub currency_id: Option<i64>,
    pub customer_id: Option<i64>,
    pub discount_id: Option<i64>,
    pub product_id: Option<i64>,
    pub product_comment_id: Option<i64>,
    pub product_complementary_id: Option<i64>,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct Campaign {
    pub id: i64,
    pub title: String,
    pub slug: Option<String>,
    pub description: String,
    pub start_date: Option<DateTime<Utc>>,
    pub end_date: Option<DateTime<Utc>>,
    pub focused_on: String,
    pub users_category_id: Option<i64>,
    pub created_at: DateTime<Utc>,
    pub updated_at: DateTime<Utc>,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct CampaignsCategory {
    pub id: i64,
    pub campaign_id: i64,
    pub category_id: i64,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct CampaignsTag {
    pub id: i64,
    pub campaign_id: i64,
    pub tag_id: i64,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct CarteraAsset {
    pub id: i64,
    pub object_id: i32,
    pub is_stock: bool,
    pub is_etf: bool,
    pub is_crypto: bool,
    pub content_type_id: Option<i32>,
    pub user_id: Option<i64>,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct CarteraCashflowCategory {
    pub id: i64,
    pub name: String,
    pub date_created: DateTime<Utc>,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct CarteraIncome {
    pub id: i64,
    pub name: String,
    pub amount: BigDecimal,
    pub description: String,
    pub date: Option<NaiveDate>,
    pub is_recurrent: bool,
    pub currency_id: Option<i64>,
    pub user_id: Option<i64>,
    pub category_id: Option<i64>,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct CarteraMovement {
    pub id: i64,
    pub move_type: Option<i32>,
    pub price: BigDecimal,
    pub date: Option<NaiveDate>,
    pub quantity: i32,
    pub observacion: String,
    pub fee: BigDecimal,
    pub asset_related_id: Option<i64>,
    pub currency_id: Option<i64>,
    pub user_id: Option<i64>,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct CarteraObjective {
    pub id: i64,
    pub name: String,
    pub date_created: DateTime<Utc>,
    pub date_to_achieve: Option<DateTime<Utc>>,
    pub date_achived: Option<DateTime<Utc>>,
    pub observation: String,
    pub accomplished: bool,
    pub abandoned: bool,
    pub percentage: BigDecimal,
    pub amount: BigDecimal,
    pub user_id: Option<i64>,
    pub end_date: Option<DateTime<Utc>>,
    pub is_rule: bool,
    pub requirement: serde_json::Value,
    pub rule_ends: bool,
    pub start_date: Option<DateTime<Utc>>,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct CarteraPatrimoine {
    pub id: i64,
    pub default_currency_id: Option<i64>,
    pub user_id: Option<i64>,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct CarteraPatrimoineAsset {
    pub id: i64,
    pub patrimonio_id: i64,
    pub asset_id: i64,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct CarteraPatrimoineObjective {
    pub id: i64,
    pub patrimonio_id: i64,
    pub financialobjectif_id: i64,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct CarteraSpend {
    pub id: i64,
    pub name: String,
    pub amount: BigDecimal,
    pub description: String,
    pub date: Option<NaiveDate>,
    pub is_recurrent: bool,
    pub currency_id: Option<i64>,
    pub user_id: Option<i64>,
    pub category_id: Option<i64>,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct Category {
    pub id: i64,
    pub name: Option<String>,
    pub slug: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct DjangoAdminLog {
    pub id: i32,
    pub action_time: DateTime<Utc>,
    pub object_id: Option<String>,
    pub object_repr: String,
    pub action_flag: i16,
    pub change_message: String,
    pub content_type_id: Option<i32>,
    pub user_id: i64,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct DjangoCeleryBeatClockedschedule {
    pub id: i32,
    pub clocked_time: DateTime<Utc>,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct DjangoCeleryBeatCrontabschedule {
    pub id: i32,
    pub minute: String,
    pub hour: String,
    pub day_of_week: String,
    pub day_of_month: String,
    pub month_of_year: String,
    pub timezone: String,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct DjangoCeleryBeatIntervalschedule {
    pub id: i32,
    pub every: i32,
    pub period: String,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct DjangoCeleryBeatPeriodictask {
    pub id: i32,
    pub name: String,
    pub task: String,
    pub args: String,
    pub kwargs: String,
    pub queue: Option<String>,
    pub exchange: Option<String>,
    pub routing_key: Option<String>,
    pub expires: Option<DateTime<Utc>>,
    pub enabled: bool,
    pub last_run_at: Option<DateTime<Utc>>,
    pub total_run_count: i32,
    pub date_changed: DateTime<Utc>,
    pub description: String,
    pub crontab_id: Option<i32>,
    pub interval_id: Option<i32>,
    pub solar_id: Option<i32>,
    pub one_off: bool,
    pub start_time: Option<DateTime<Utc>>,
    pub priority: Option<i32>,
    pub headers: String,
    pub clocked_id: Option<i32>,
    pub expire_seconds: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(ident))]
pub struct DjangoCeleryBeatPeriodictask {
    pub ident: i16,
    pub last_update: DateTime<Utc>,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct DjangoCeleryBeatSolarschedule {
    pub id: i32,
    pub event: String,
    pub latitude: BigDecimal,
    pub longitude: BigDecimal,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct DjangoContentType {
    pub id: i32,
    pub app_label: String,
    pub model: String,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct DjangoMigration {
    pub id: i64,
    pub app: String,
    pub name: String,
    pub applied: DateTime<Utc>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(session_key))]
pub struct DjangoSession {
    pub session_key: String,
    pub session_data: String,
    pub expire_date: DateTime<Utc>,
}

#[derive(Queryable, Debug)]
pub struct DjangoSite {
    pub id: i32,
    pub domain: String,
    pub name: String,
}

#[derive(Queryable, Debug)]
pub struct EmailsNotification {
    pub id: i64,
    pub date_sent: DateTime<Utc>,
    pub opened: bool,
    pub date_opened: DateTime<Utc>,
    pub email_related_id: Option<i64>,
    pub sent_to_id: i64,
    pub created_at: Option<DateTime<Utc>>,
    pub updated_at: Option<DateTime<Utc>>,
}

#[derive(Queryable, Debug)]
pub struct Etf {
    pub id: i64,
    pub ticker: String,
    pub name: String,
    pub exchange_id: Option<i64>,
}

#[derive(Queryable, Debug)]
pub struct EtfsComposition {
    pub id: i64,
    pub date: Option<NaiveDate>,
    pub company_size: Option<f64>,
    pub number_shares: Option<i64>,
    pub company_related_id: Option<i64>,
    pub etf_related_id: Option<i64>,
}

#[derive(Queryable, Debug)]
pub struct FavoritesEtfsHistorial {
    pub id: i64,
    pub date: DateTime<Utc>,
    pub added: bool,
    pub removed: bool,
    pub asset_id: Option<i64>,
    pub user_id: Option<i64>,
    pub created_at: Option<DateTime<Utc>>,
    pub updated_at: Option<DateTime<Utc>>,
}

#[derive(Queryable, Debug)]
pub struct FavoritesEtfsList {
    pub id: i64,
    pub user_id: Option<i64>,
}

#[derive(Queryable, Debug)]
pub struct FavoritesEtfsListEtf {
    pub id: i64,
    pub favoritesetfslist_id: i64,
    pub etf_id: i64,
}

#[derive(Queryable, Debug)]
pub struct FavoritesStocksBought {
    pub id: i64,
    pub date: DateTime<Utc>,
    pub company_id: Option<i64>,
    pub user_id: Option<i64>,
}

#[derive(Queryable, Debug)]
pub struct FavoritesStocksHistorial {
    pub id: i64,
    pub date: DateTime<Utc>,
    pub added: bool,
    pub removed: bool,
    pub asset_id: Option<i64>,
    pub user_id: Option<i64>,
    pub created_at: Option<DateTime<Utc>>,
    pub updated_at: Option<DateTime<Utc>>,
}

#[derive(Queryable, Debug)]
pub struct FavoritesStocksList {
    pub id: i64,
    pub user_id: Option<i64>,
}

#[derive(Queryable, Debug)]
pub struct FavoritesStocksListStock {
    pub id: i64,
    pub favoritesstockslist_id: i64,
    pub company_id: i64,
}

#[derive(Queryable, Debug)]
pub struct FavoritesSuperinvestorHistorial {
    pub id: i64,
    pub date: DateTime<Utc>,
    pub added: bool,
    pub removed: bool,
    pub superinvestor_id: Option<i64>,
    pub user_id: Option<i64>,
    pub created_at: Option<DateTime<Utc>>,
    pub updated_at: Option<DateTime<Utc>>,
}

#[derive(Queryable, Debug)]
pub struct FavoritesSuperinvestorList {
    pub id: i64,
    pub user_id: Option<i64>,
}

#[derive(Queryable, Debug)]
pub struct FavoritesSuperinvestorListSuperinvestor {
    pub id: i64,
    pub favoritessuperinvestorslist_id: i64,
    pub superinvestor_id: i64,
}

#[derive(Queryable, Debug)]
pub struct FavoritesTermsHistorial {
    pub id: i64,
    pub date: DateTime<Utc>,
    pub added: bool,
    pub removed: bool,
    pub term_id: Option<i64>,
    pub user_id: Option<i64>,
    pub created_at: Option<DateTime<Utc>>,
    pub updated_at: Option<DateTime<Utc>>,
}

#[derive(Queryable, Debug)]
pub struct FavoritesTermsList {
    pub id: i64,
    pub user_id: Option<i64>,
}

#[derive(Queryable, Debug)]
pub struct FavoritesTermsListTerm {
    pub id: i64,
    pub favoritestermslist_id: i64,
    pub term_id: i64,
}

#[derive(Queryable, Debug)]
pub struct MetaInformation {
    pub id: i64,
    pub meta_title: Option<String>,
    pub meta_description: Option<String>,
    pub meta_img: Option<String>,
    pub meta_url: Option<String>,
    pub meta_keywords: String,
    pub published_time: DateTime<Utc>,
    pub modified_time: DateTime<Utc>,
    pub created_at: DateTime<Utc>,
    pub views: i64,
    pub meta_author_id: Option<i64>,
    pub schema_org: Option<serde_json::Value>,
}

#[derive(Queryable, Debug)]
pub struct MetaInformationHistorial {
    pub id: i64,
    pub in_use: bool,
    pub parameter_settings_id: Option<i64>,
}

#[derive(Queryable, Debug)]
pub struct MetaProfileHistorial {
    pub id: i64,
    pub date: DateTime<Utc>,
    pub meta_info_id: Option<i64>,
    pub user_id: Option<i64>,
}

#[derive(Queryable, Debug)]
pub struct MetaProfileInfo {
    pub id: i64,
    pub ip: Option<String>,
    pub country_code: Option<String>,
    pub country_name: Option<String>,
    pub dma_code: Option<String>,
    pub is_in_european_union: bool,
    pub latitude: Option<String>,
    pub longitude: Option<String>,
    pub city: Option<String>,
    pub region: Option<String>,
    pub time_zone: Option<String>,
    pub postal_code: Option<String>,
    pub continent_code: Option<String>,
    pub continent_name: Option<String>,
    pub user_agent: Option<String>,
}

#[derive(Queryable, Debug)]
pub struct Notification {
    pub id: i64,
    pub object_id: i32,
    pub date: DateTime<Utc>,
    pub is_seen: bool,
    pub content_type_id: i32,
    pub notification_type: String,
    pub user_id: i64,
    pub created_at: Option<DateTime<Utc>>,
    pub updated_at: Option<DateTime<Utc>>,
}

#[derive(Queryable, Debug)]
pub struct Profile {
    pub id: i64,
    pub edad: Option<NaiveDate>,
    pub ciudad: Option<String>,
    pub bio: Option<String>,
    pub user_id: i64,
    pub recommended_by_id: Option<i64>,
    pub ref_code: String,
    pub reputation_score: i32,
    pub creditos: i32,
    pub pais: Option<String>,
    pub foto_perfil: String,
}

#[derive(Queryable, Debug)]
pub struct Promotion {
    pub id: i64,
    pub title: String,
    pub content: String,
    pub thumbnail: String,
    pub slug: Option<String>,
    pub prize: i64,
    pub shareable_url: String,
    pub redirect_to: String,
    pub medium: String,
    pub web_promotion_style: String,
    pub web_location: String,
    pub social_media: String,
    pub publication_date: DateTime<Utc>,
    pub reuse: bool,
    pub times_to_reuse: i64,
    pub clicks_by_user: i64,
    pub clicks_by_not_user: i64,
    pub web_place: String,
    pub campaign_id: Option<i64>,
    pub created_at: DateTime<Utc>,
    pub updated_at: DateTime<Utc>,
}

#[derive(Queryable, Debug)]
pub struct PromotionsUsersClicked {
    pub id: i64,
    pub promotion_id: i64,
    pub user_id: i64,
}

#[derive(Queryable, Debug)]
pub struct PromotionsVisiteursClicked {
    pub id: i64,
    pub promotion_id: i64,
    pub visiteur_id: i64,
}

#[derive(Queryable, Debug)]
pub struct PublicBlogPublicblogasnewsletter {
    pub id: i64,
    pub title: String,
    pub content: String,
    pub blog_related_id: Option<i64>,
    pub date_to_send: Option<DateTime<Utc>>,
    pub sent: bool,
    pub default_content_id: Option<i64>,
    pub default_title_id: Option<i64>,
    pub created_at: Option<DateTime<Utc>>,
    pub updated_at: Option<DateTime<Utc>>,
    pub call_to_action: Option<String>,
    pub call_to_action_url: Option<String>,
}

#[derive(Queryable, Debug)]
pub struct PublicBlogPublicblogasnewsletterTitleEmoji {
    pub id: i64,
    pub publicblogasnewsletter_id: i64,
    pub emoji_id: i64,
}

#[derive(Queryable, Debug)]
pub struct QuestionComment {
    pub id: i64,
    pub content: String,
    pub created_at: Option<DateTime<Utc>>,
    pub author_id: Option<i64>,
    pub content_related_id: Option<i64>,
    pub updated_at: Option<DateTime<Utc>>,
}

#[derive(Queryable, Debug)]
pub struct Question {
    pub id: i64,
    pub title: String,
    pub slug: Option<String>,
    pub content: String,
    pub total_views: i32,
    pub is_answered: bool,
    pub created_at: Option<DateTime<Utc>>,
    pub updated_at: Option<DateTime<Utc>>,
    pub total_votes: i32,
    pub has_accepted_answer: bool,
    pub author_id: Option<i64>,
    pub category_id: Option<i64>,
    pub times_shared: i32,
    pub hide_question: bool,
    pub checkings: serde_json::Value,
}

#[derive(Queryable, Debug)]
pub struct QuestionsDownvote {
    pub id: i64,
    pub question_id: i64,
    pub user_id: i64,
}

#[derive(Queryable, Debug)]
pub struct QuestionsTag {
    pub id: i64,
    pub question_id: i64,
    pub tag_id: i64,
}

#[derive(Queryable, Debug)]
pub struct QuestionsUpvote {
    pub id: i64,
    pub question_id: i64,
    pub user_id: i64,
}

#[derive(Queryable, Debug)]
pub struct RecsysCompaniesRecommendedUser {
    pub id: i64,
    pub place: String,
    pub location: String,
    pub style: String,
    pub clicked: bool,
    pub recommendation_personalized: bool,
    pub recommendation_explained: serde_json::Value,
    pub date: DateTime<Utc>,
    pub model_recommended_id: Option<i64>,
    pub user_id: Option<i64>,
}

#[derive(Queryable, Debug)]
pub struct RecsysCompaniesRecommendedVisiteur {
    pub id: i64,
    pub place: String,
    pub location: String,
    pub style: String,
    pub clicked: bool,
    pub recommendation_personalized: bool,
    pub recommendation_explained: serde_json::Value,
    pub date: DateTime<Utc>,
    pub model_recommended_id: Option<i64>,
    pub user_id: Option<i64>,
}

#[derive(Queryable, Debug)]
pub struct RecsysProductComplementaryRecommendedUser {
    pub id: i64,
    pub place: String,
    pub location: String,
    pub style: String,
    pub clicked: bool,
    pub recommendation_personalized: bool,
    pub recommendation_explained: serde_json::Value,
    pub date: DateTime<Utc>,
    pub model_recommended_id: Option<i64>,
    pub user_id: Option<i64>,
}

#[derive(Queryable, Debug)]
pub struct RecsysProductComplementaryRecommendedVisiteur {
    pub id: i64,
    pub place: String,
    pub location: String,
    pub style: String,
    pub clicked: bool,
    pub recommendation_personalized: bool,
    pub recommendation_explained: serde_json::Value,
    pub date: DateTime<Utc>,
    pub model_recommended_id: Option<i64>,
    pub user_id: Option<i64>,
}

#[derive(Queryable, Debug)]
pub struct RecsysPromotionRecommendedUser {
    pub id: i64,
    pub place: String,
    pub location: String,
    pub style: String,
    pub clicked: bool,
    pub recommendation_personalized: bool,
    pub recommendation_explained: serde_json::Value,
    pub date: DateTime<Utc>,
    pub model_recommended_id: Option<i64>,
    pub user_id: Option<i64>,
}

#[derive(Queryable, Debug)]
pub struct RecsysPromotionRecommendedVisiteur {
    pub id: i64,
    pub place: String,
    pub location: String,
    pub style: String,
    pub clicked: bool,
    pub recommendation_personalized: bool,
    pub recommendation_explained: serde_json::Value,
    pub date: DateTime<Utc>,
    pub model_recommended_id: Option<i64>,
    pub user_id: Option<i64>,
}

#[derive(Queryable, Debug)]
pub struct RecsysPublicBlogsRecommendedUser {
    pub id: i64,
    pub place: String,
    pub location: String,
    pub style: String,
    pub clicked: bool,
    pub recommendation_personalized: bool,
    pub recommendation_explained: serde_json::Value,
    pub date: DateTime<Utc>,
    pub model_recommended_id: Option<i64>,
    pub user_id: Option<i64>,
}

#[derive(Queryable, Debug)]
pub struct RecsysPublicBlogsRecommendedVisiteur {
    pub id: i64,
    pub place: String,
    pub location: String,
    pub style: String,
    pub clicked: bool,
    pub recommendation_personalized: bool,
    pub recommendation_explained: serde_json::Value,
    pub date: DateTime<Utc>,
    pub model_recommended_id: Option<i64>,
    pub user_id: Option<i64>,
}

#[derive(Queryable, Debug)]
pub struct RecsysQuestionsRecommendedUser {
    pub id: i64,
    pub place: String,
    pub location: String,
    pub style: String,
    pub clicked: bool,
    pub recommendation_personalized: bool,
    pub recommendation_explained: serde_json::Value,
    pub date: DateTime<Utc>,
    pub model_recommended_id: Option<i64>,
    pub user_id: Option<i64>,
}

#[derive(Queryable, Debug)]
pub struct RecsysQuestionsRecommendedVisiteur {
    pub id: i64,
    pub place: String,
    pub location: String,
    pub style: String,
    pub clicked: bool,
    pub recommendation_personalized: bool,
    pub recommendation_explained: serde_json::Value,
    pub date: DateTime<Utc>,
    pub model_recommended_id: Option<i64>,
    pub user_id: Option<i64>,
}

#[derive(Queryable, Debug)]
pub struct RecsysTermsRecommendedUser {
    pub id: i64,
    pub place: String,
    pub location: String,
    pub style: String,
    pub clicked: bool,
    pub recommendation_personalized: bool,
    pub recommendation_explained: serde_json::Value,
    pub date: DateTime<Utc>,
    pub model_recommended_id: Option<i64>,
    pub user_id: Option<i64>,
}

#[derive(Queryable, Debug)]
pub struct RecsysTermsRecommendedVisiteur {
    pub id: i64,
    pub place: String,
    pub location: String,
    pub style: String,
    pub clicked: bool,
    pub recommendation_personalized: bool,
    pub recommendation_explained: serde_json::Value,
    pub date: DateTime<Utc>,
    pub model_recommended_id: Option<i64>,
    pub user_id: Option<i64>,
}

#[derive(Queryable, Debug)]
pub struct RoboadvisorAssetsWeight {
    pub id: i64,
    pub etfs_percentage: BigDecimal,
    pub stocks_percentage: BigDecimal,
    pub bonds_percentage: BigDecimal,
    pub real_estate_percentage: BigDecimal,
    pub sofipos_percentage: BigDecimal,
    pub cryptos_percentage: BigDecimal,
    pub service_activity_id: Option<i64>,
    pub service_step_id: Option<i64>,
    pub user_id: Option<i64>,
}

#[derive(Queryable, Debug)]
pub struct RoboadvisorCompanyAnalysi {
    pub id: i64,
    pub horizon_time: i32,
    pub horizon_period: String,
    pub comment: String,
    pub sector_knowledge: Option<String>,
    pub asset_knowledge: Option<String>,
    pub amount_time_studied: i32,
    pub period_time_studied: String,
    pub sector_relationship: String,
    pub result: Option<i32>,
    pub asset_id: Option<i64>,
    pub service_activity_id: Option<i64>,
    pub service_step_id: Option<i64>,
    pub user_id: Option<i64>,
}

#[derive(Queryable, Debug)]
pub struct RoboadvisorFinancialSituation {
    pub id: i64,
    pub average_income: BigDecimal,
    pub average_expense: BigDecimal,
    pub debt: BigDecimal,
    pub recurrent_savings: bool,
    pub recurrent_debts: bool,
    pub savings: BigDecimal,
    pub debt_percentage: BigDecimal,
    pub saving_percentage: BigDecimal,
    pub number_sources_income: i32,
    pub currency_id: Option<i64>,
    pub service_activity_id: Option<i64>,
    pub service_step_id: Option<i64>,
    pub user_id: Option<i64>,
}

#[derive(Queryable, Debug)]
pub struct RoboadvisorInvestorExperience {
    pub id: i64,
    pub age: Option<i32>,
    pub objectif: Option<i32>,
    pub investor_type_self_definition: Option<String>,
    pub percentage_invested: BigDecimal,
    pub percentage_anualized_revenue: Option<BigDecimal>,
    pub time_investing_exp: i32,
    pub period_investing_exp: String,
    pub service_activity_id: Option<i64>,
    pub service_step_id: Option<i64>,
    pub user_id: Option<i64>,
}

#[derive(Queryable, Debug)]
pub struct RoboadvisorRiskAversion {
    pub id: i64,
    pub horizon_time: i32,
    pub horizon_period: String,
    pub comment: String,
    pub volatilidad: Option<i32>,
    pub percentage_for_onefive: Option<i32>,
    pub percentage_for_three: Option<i32>,
    pub percentage_for_fourfive: Option<i32>,
    pub percentage_for_zerofive: Option<i32>,
    pub percentage_in_one_stock: Option<i32>,
    pub number_stocks: Option<i32>,
    pub service_activity_id: Option<i64>,
    pub service_step_id: Option<i64>,
    pub user_id: Option<i64>,
}

#[derive(Queryable, Debug)]
pub struct RoboadvisorServiceActivity {
    pub id: i64,
    pub date_started: DateTime<Utc>,
    pub date_finished: Option<DateTime<Utc>>,
    pub status: String,
    pub service_id: Option<i64>,
    pub user_id: Option<i64>,
}

#[derive(Queryable, Debug)]
pub struct RoboadvisorServiceStepActivity {
    pub id: i64,
    pub date_started: Option<DateTime<Utc>>,
    pub date_finished: DateTime<Utc>,
    pub status: String,
    pub step_id: Option<i64>,
    pub user_id: Option<i64>,
}

#[derive(Queryable, Debug)]
pub struct RoboadvisorServiceStep {
    pub id: i64,
    pub title: Option<String>,
    pub slug: Option<String>,
    pub description: Option<String>,
    pub order: Option<i32>,
    pub url: Option<String>,
    pub template: Option<String>,
    pub service_related_id: Option<i64>,
}

#[derive(Queryable, Debug)]
pub struct RoboadvisorService {
    pub id: i64,
    pub price: Option<i64>,
    pub order: Option<i32>,
    pub available: bool,
    pub title: Option<String>,
    pub description: Option<String>,
    pub slug: Option<String>,
    pub thumbnail: Option<String>,
    pub template_result: Option<String>,
    pub category_id: Option<i64>,
}

#[derive(Queryable, Debug)]
pub struct RoboadvisorServicesTag {
    pub id: i64,
    pub roboadvisorservice_id: i64,
    pub tag_id: i64,
}

#[derive(Queryable, Debug)]
pub struct RoboadvisorStocksPortfolio {
    pub id: i64,
    pub service_activity_id: Option<i64>,
    pub service_step_id: Option<i64>,
    pub user_id: Option<i64>,
}

#[derive(Queryable, Debug)]
pub struct RoboadvisorStocksPortfolioPosition {
    pub id: i64,
    pub horizon_time: i32,
    pub horizon_period: String,
    pub comment: String,
    pub sector_knowledge: Option<String>,
    pub asset_knowledge: Option<String>,
    pub amount_time_studied: i32,
    pub period_time_studied: String,
    pub number_shares: Option<BigDecimal>,
    pub capital_invested: Option<BigDecimal>,
    pub sector_relationship: String,
    pub asset_id: Option<i64>,
    pub service_activity_id: Option<i64>,
    pub service_step_id: Option<i64>,
    pub user_id: Option<i64>,
}

#[derive(Queryable, Debug)]
pub struct RoboadvisorStocksPortfolioStock {
    pub id: i64,
    pub roboadvisorquestionstocksportfolio_id: i64,
    pub roboadvisorquestionportfoliocomposition_id: i64,
}

#[derive(Queryable, Debug)]
pub struct ScreenerYahooScreener {
    pub id: i64,
    pub name: String,
    pub slug: String,
    pub description: String,
    pub json_info: serde_json::Value,
    pub yq_name: String,
    pub asset_class_related: String,
    pub show: bool,
}

#[derive(Queryable, Debug)]
pub struct ScreenerYahooScreenersCategory {
    pub id: i64,
    pub yahooscreener_id: i64,
    pub category_id: i64,
}

#[derive(Queryable, Debug)]
pub struct ScreenerYahooScreenersTag {
    pub id: i64,
    pub yahooscreener_id: i64,
    pub tag_id: i64,
}

#[derive(Queryable, Debug)]
pub struct SeoCompaniesVisitedUser {
    pub id: i64,
    pub date: Option<DateTime<Utc>>,
    pub model_visited_id: Option<i64>,
    pub user_id: Option<i64>,
    pub visit_id: Option<i64>,
}

#[derive(Queryable, Debug)]
pub struct SeoCompaniesVisitedVisiteur {
    pub id: i64,
    pub date: Option<DateTime<Utc>>,
    pub model_visited_id: Option<i64>,
    pub user_id: Option<i64>,
    pub visit_id: Option<i64>,
}

#[derive(Queryable, Debug)]
pub struct SeoPublicBlogsVisitedUser {
    pub id: i64,
    pub date: Option<DateTime<Utc>>,
    pub model_visited_id: Option<i64>,
    pub user_id: Option<i64>,
    pub visit_id: Option<i64>,
}

#[derive(Queryable, Debug)]
pub struct SeoPublicBlogsVisitedVisiteur {
    pub id: i64,
    pub date: Option<DateTime<Utc>>,
    pub model_visited_id: Option<i64>,
    pub user_id: Option<i64>,
    pub visit_id: Option<i64>,
}

#[derive(Queryable, Debug)]
pub struct SeoQuestionsVisitedUser {
    pub id: i64,
    pub date: Option<DateTime<Utc>>,
    pub model_visited_id: Option<i64>,
    pub user_id: Option<i64>,
    pub visit_id: Option<i64>,
}

#[derive(Queryable, Debug)]
pub struct SeoQuestionsVisitedVisiteur {
    pub id: i64,
    pub date: Option<DateTime<Utc>>,
    pub model_visited_id: Option<i64>,
    pub user_id: Option<i64>,
    pub visit_id: Option<i64>,
}

#[derive(Queryable, Debug)]
pub struct SeoTermsVisitedUser {
    pub id: i64,
    pub date: Option<DateTime<Utc>>,
    pub model_visited_id: Option<i64>,
    pub user_id: Option<i64>,
    pub visit_id: Option<i64>,
}

#[derive(Queryable, Debug)]
pub struct SeoTermsVisitedVisiteur {
    pub id: i64,
    pub date: Option<DateTime<Utc>>,
    pub model_visited_id: Option<i64>,
    pub user_id: Option<i64>,
    pub visit_id: Option<i64>,
}

#[derive(Queryable, Debug)]
pub struct SeoUsersVisiteursRelation {
    pub id: i64,
    pub date: DateTime<Utc>,
    pub user_id: Option<i64>,
    pub visiteur_id: Option<i64>,
}

#[derive(Queryable, Debug)]
pub struct SharedBlog {
    pub id: i64,
    pub date_shared: DateTime<Utc>,
    pub post_type: i32,
    pub platform_shared: String,
    pub social_id: String,
    pub title: String,
    pub content: String,
    pub extra_description: String,
    pub content_shared_id: Option<i64>,
    pub user_id: Option<i64>,
    pub default_content_id: Option<i64>,
    pub default_title_id: Option<i64>,
    pub metadata: serde_json::Value,
}

#[derive(Queryable, Debug)]
pub struct SharedBlogsHashtag {
    pub id: i64,
    pub blogsharedhistorial_id: i64,
    pub hashtag_id: i64,
}

#[derive(Queryable, Debug)]
pub struct SharedBlogsTitleEmoji {
    pub id: i64,
    pub blogsharedhistorial_id: i64,
    pub emoji_id: i64,
}

#[derive(Queryable, Debug)]
pub struct SharedCompany {
    pub id: i64,
    pub date_shared: DateTime<Utc>,
    pub post_type: i32,
    pub platform_shared: String,
    pub social_id: String,
    pub title: String,
    pub content: String,
    pub extra_description: String,
    pub content_shared_id: Option<i64>,
    pub user_id: Option<i64>,
    pub default_content_id: Option<i64>,
    pub default_title_id: Option<i64>,
    pub metadata: serde_json::Value,
}

#[derive(Queryable, Debug)]
pub struct SharedCompaniesHashtag {
    pub id: i64,
    pub companysharedhistorial_id: i64,
    pub hashtag_id: i64,
}

#[derive(Queryable, Debug)]
pub struct SharedCompaniesTitleEmoji {
    pub id: i64,
    pub companysharedhistorial_id: i64,
    pub emoji_id: i64,
}

#[derive(Queryable, Debug)]
pub struct SharedNew {
    pub id: i64,
    pub date_shared: DateTime<Utc>,
    pub post_type: i32,
    pub platform_shared: String,
    pub social_id: String,
    pub title: String,
    pub content: String,
    pub extra_description: String,
    pub company_related_id: Option<i64>,
    pub user_id: Option<i64>,
    pub default_content_id: Option<i64>,
    pub default_title_id: Option<i64>,
    pub metadata: serde_json::Value,
}

#[derive(Queryable, Debug)]
pub struct SharedNewsHashtag {
    pub id: i64,
    pub newssharedhistorial_id: i64,
    pub hashtag_id: i64,
}

#[derive(Queryable, Debug)]
pub struct SharedNewsTitleEmoji {
    pub id: i64,
    pub newssharedhistorial_id: i64,
    pub emoji_id: i64,
}

#[derive(Queryable, Debug)]
pub struct SharedProfile {
    pub id: i64,
    pub date_shared: DateTime<Utc>,
    pub post_type: i32,
    pub platform_shared: String,
    pub social_id: String,
    pub title: String,
    pub content: String,
    pub extra_description: String,
    pub content_shared_id: Option<i64>,
    pub user_id: Option<i64>,
    pub default_content_id: Option<i64>,
    pub default_title_id: Option<i64>,
    pub metadata: serde_json::Value,
}

#[derive(Queryable, Debug)]
pub struct SharedProfilesHashtag {
    pub id: i64,
    pub profilesharedhistorial_id: i64,
    pub hashtag_id: i64,
}

#[derive(Queryable, Debug)]
pub struct SharedProfilesTitleEmoji {
    pub id: i64,
    pub profilesharedhistorial_id: i64,
    pub emoji_id: i64,
}

#[derive(Queryable, Debug)]
pub struct SharedQuestion {
    pub id: i64,
    pub date_shared: DateTime<Utc>,
    pub post_type: i32,
    pub platform_shared: String,
    pub social_id: String,
    pub title: String,
    pub content: String,
    pub extra_description: String,
    pub content_shared_id: Option<i64>,
    pub user_id: Option<i64>,
    pub default_content_id: Option<i64>,
    pub default_title_id: Option<i64>,
    pub metadata: serde_json::Value,
}

#[derive(Queryable, Debug)]
pub struct SharedQuestionsHashtag {
    pub id: i64,
    pub questionsharedhistorial_id: i64,
    pub hashtag_id: i64,
}

#[derive(Queryable, Debug)]
pub struct SharedQuestionsTitleEmoji {
    pub id: i64,
    pub questionsharedhistorial_id: i64,
    pub emoji_id: i64,
}

#[derive(Queryable, Debug)]
pub struct SharedTerm {
    pub id: i64,
    pub date_shared: DateTime<Utc>,
    pub post_type: i32,
    pub platform_shared: String,
    pub social_id: String,
    pub title: String,
    pub content: String,
    pub extra_description: String,
    pub content_shared_id: Option<i64>,
    pub user_id: Option<i64>,
    pub default_content_id: Option<i64>,
    pub default_title_id: Option<i64>,
    pub metadata: serde_json::Value,
}

#[derive(Queryable, Debug)]
pub struct SharedTermsHashtag {
    pub id: i64,
    pub termsharedhistorial_id: i64,
    pub hashtag_id: i64,
}

#[derive(Queryable, Debug)]
pub struct SharedTermsTitleEmoji {
    pub id: i64,
    pub termsharedhistorial_id: i64,
    pub emoji_id: i64,
}

#[derive(Queryable, Debug)]
pub struct SocialaccountSocialaccount {
    pub id: i32,
    pub provider: String,
    pub uid: String,
    pub last_login: DateTime<Utc>,
    pub date_joined: DateTime<Utc>,
    pub extra_data: String,
    pub user_id: i64,
}

#[derive(Queryable, Debug)]
pub struct SocialaccountSocialapp {
    pub id: i32,
    pub provider: String,
    pub name: String,
    pub client_id: String,
    pub secret: String,
    pub key: String,
}

#[derive(Queryable, Debug)]
pub struct SocialaccountSocialappSite {
    pub id: i64,
    pub socialapp_id: i32,
    pub site_id: i32,
}

#[derive(Queryable, Debug)]
pub struct SocialaccountSocialtoken {
    pub id: i32,
    pub token: String,
    pub token_secret: String,
    pub expires_at: Option<DateTime<Utc>>,
    pub account_id: i32,
    pub app_id: i32,
}

#[derive(Queryable, Debug)]
pub struct SocialmediaAuth {
    pub id: i64,
    pub created_at: DateTime<Utc>,
    pub updated_at: DateTime<Utc>,
    pub socialmedia: String,
    pub metadata: serde_json::Value,
    pub user_id: Option<i64>,
    pub title: Option<String>,
    pub page_id: Option<String>,
    pub page_name: Option<String>,
}

#[derive(Queryable, Debug)]
pub struct SocialmediaContent {
    pub id: i64,
    pub title: String,
    pub for_content: i32,
    pub purpose: Option<String>,
    pub content: String,
}

#[derive(Queryable, Debug)]
pub struct SocialmediaEmoji {
    pub id: i64,
    pub emoji: String,
}

#[derive(Queryable, Debug)]
pub struct SocialmediaHashtag {
    pub id: i64,
    pub title: String,
    pub platform: String,
    pub is_trending: bool,
}

#[derive(Queryable, Debug)]
pub struct SocialmediaTitle {
    pub id: i64,
    pub title: String,
    pub for_content: i32,
    pub purpose: Option<String>,
}

#[derive(Queryable, Debug)]
pub struct Superinvestor {
    pub id: i64,
    pub name: Option<String>,
    pub fund_name: Option<String>,
    pub info_accronym: Option<String>,
    pub slug: Option<String>,
    pub last_update: Option<DateTime<Utc>>,
    pub has_error: bool,
    pub error: Option<String>,
    pub image: Option<String>,
}

#[derive(Queryable, Debug)]
pub struct SuperinvestorsActivity {
    pub id: i64,
    pub percentage_share_change: Option<f64>,
    pub share_change: Option<f64>,
    pub portfolio_change: Option<f64>,
    pub is_new: bool,
    pub movement: Option<i32>,
    pub company_name: Option<String>,
    pub not_registered_company: bool,
    pub need_verify_company: bool,
    pub company_id: Option<i64>,
    pub period_related_id: Option<i64>,
    pub superinvestor_related_id: Option<i64>,
}

#[derive(Queryable, Debug)]
pub struct SuperinvestorsHistory {
    pub id: i64,
    pub company_name: Option<String>,
    pub not_registered_company: bool,
    pub need_verify_company: bool,
    pub portfolio_change: Option<f64>,
    pub movement: Option<String>,
    pub shares: Option<f64>,
    pub reported_price: Option<f64>,
    pub portfolio_weight: Option<f64>,
    pub company_id: Option<i64>,
    pub period_related_id: Option<i64>,
    pub superinvestor_related_id: Option<i64>,
}

#[derive(Queryable, Debug)]
pub struct Tag {
    pub id: i64,
    pub name: Option<String>,
    pub slug: Option<String>,
}

#[derive(Queryable, Debug)]
pub struct TemporaryInvestorProfile {
    pub id: i64,
    pub created_at: DateTime<Utc>,
    pub horizon: Option<String>,
    pub risk_profile: String,
    pub investor_type: Option<String>,
    pub profile_related_id: Option<i64>,
    pub service_activity_id: Option<i64>,
}

#[derive(Queryable, Debug)]
pub struct Term {
    pub id: i64,
    pub title: Option<String>,
    pub resume: Option<String>,
    pub slug: Option<String>,
    pub created_at: Option<DateTime<Utc>>,
    pub total_views: i32,
    pub updated_at: Option<DateTime<Utc>>,
    pub total_votes: i32,
    pub author_id: Option<i64>,
    pub category_id: Option<i64>,
    pub published_at: DateTime<Utc>,
    pub status: i32,
    pub thumbnail: Option<String>,
    pub times_shared: i32,
    pub in_text_image: bool,
    pub non_thumbnail_url: Option<String>,
    pub checkings: serde_json::Value,
}

#[derive(Queryable, Debug)]
pub struct TermComment {
    pub id: i64,
    pub content: String,
    pub created_at: Option<DateTime<Utc>>,
    pub author_id: Option<i64>,
    pub content_related_id: Option<i64>,
    pub updated_at: Option<DateTime<Utc>>,
}

#[derive(Queryable, Debug)]
pub struct TermContent {
    pub id: i64,
    pub title: Option<String>,
    pub content: String,
    pub term_related_id: Option<i64>,
    pub order: i32,
}

#[derive(Queryable, Debug)]
pub struct TermContentCorrection {
    pub id: i64,
    pub title: String,
    pub date_suggested: DateTime<Utc>,
    pub is_approved: bool,
    pub date_approved: Option<DateTime<Utc>>,
    pub content: String,
    pub approved_by_id: Option<i64>,
    pub corrected_by_id: Option<i64>,
    pub term_content_related_id: Option<i64>,
    pub original_content: String,
    pub original_title: String,
}

#[derive(Queryable, Debug)]
pub struct TermDownvote {
    pub id: i64,
    pub term_id: i64,
    pub user_id: i64,
}

#[derive(Queryable, Debug)]
pub struct TermTag {
    pub id: i64,
    pub term_id: i64,
    pub tag_id: i64,
}

#[derive(Queryable, Debug)]
pub struct TermUpvote {
    pub id: i64,
    pub term_id: i64,
    pub user_id: i64,
}

#[derive(Queryable, Debug)]
pub struct TermsToResume {
    pub id: i64,
    pub term_to_delete_id: Option<i64>,
    pub term_to_keep_id: Option<i64>,
}

#[derive(Queryable, Debug)]
pub struct UserCreditsHistorial {
    pub id: i64,
    pub object_id: Option<i64>,
    pub date: DateTime<Utc>,
    pub amount: i32,
    pub initial: i32,
    pub final_: i32,
    pub movement: i32,
    pub move_source: String,
    pub has_enought_credits: bool,
    pub content_type_id: i32,
    pub user_id: Option<i64>,
}

#[derive(Queryable, Debug)]
pub struct UserInvestorProfile {
    pub id: i64,
    pub created_at: DateTime<Utc>,
    pub horizon: Option<String>,
    pub risk_profile: String,
    pub investor_type: Option<String>,
    pub updated_at: DateTime<Utc>,
    pub user_id: Option<i64>,
}

#[derive(Queryable, Debug)]
pub struct UserMetaProfileInformation {
    pub id: i64,
    pub date: DateTime<Utc>,
    pub ip: Option<String>,
    pub country_code: Option<String>,
    pub country_name: Option<String>,
    pub dma_code: Option<String>,
    pub is_in_european_union: bool,
    pub latitude: Option<String>,
    pub longitude: Option<String>,
    pub city: Option<String>,
    pub region: Option<String>,
    pub time_zone: Option<String>,
    pub postal_code: Option<String>,
    pub continent_code: Option<String>,
    pub continent_name: Option<String>,
    pub user_agent: Option<String>,
    pub user_id: Option<i64>,
}

#[derive(Queryable, Debug)]
pub struct User {
    pub id: i64,
    pub password: String,
    pub last_login: Option<DateTime<Utc>>,
    pub is_superuser: bool,
    pub username: String,
    pub email: String,
    pub is_staff: bool,
    pub is_active: bool,
    pub date_joined: DateTime<Utc>,
    pub first_name: String,
    pub last_name: String,
    pub is_writer: bool,
    pub just_newsletter: bool,
    pub just_correction: bool,
    pub is_customer: bool,
    pub is_recurrent: bool,
    pub last_time_seen: Option<DateTime<Utc>>,
    pub notifications: serde_json::Value,
    pub for_testing: bool,
    pub is_bot: bool,
}

#[derive(Queryable, Debug)]
pub struct UsersCategory {
    pub id: i64,
    pub name: String,
    pub slug: Option<String>,
}

#[derive(Queryable, Debug)]
pub struct UsersCategoriesUser {
    pub id: i64,
    pub userscategory_id: i64,
    pub user_id: i64,
}

#[derive(Queryable, Debug)]
pub struct UsersGroup {
    pub id: i64,
    pub user_id: i64,
    pub group_id: i32,
}

#[derive(Queryable, Debug)]
pub struct UsersScreenerCompaniesObservation {
    pub id: i64,
    pub date: DateTime<Utc>,
    pub observation: String,
    pub observation_type: Option<i32>,
    pub company_id: Option<i64>,
    pub user_id: Option<i64>,
}

#[derive(Queryable, Debug)]
pub struct UsersScreenerMediumPrediction {
    pub id: i64,
    pub date: DateTime<Utc>,
    pub optimistic_growth: Option<f64>,
    pub neutral_growth: Option<f64>,
    pub pesimistic_growth: Option<f64>,
    pub optimistic_margin: Option<f64>,
    pub neutral_margin: Option<f64>,
    pub pesimistic_margin: Option<f64>,
    pub optimistic_buyback: Option<f64>,
    pub neutral_buyback: Option<f64>,
    pub pesimistic_buyback: Option<f64>,
    pub optimistic_fcf_margin: Option<f64>,
    pub neutral_fcf_margin: Option<f64>,
    pub pesimistic_fcf_margin: Option<f64>,
    pub company_id: Option<i64>,
    pub user_id: Option<i64>,
}

#[derive(Queryable, Debug)]
pub struct UsersScreenerSimplePrediction {
    pub id: i64,
    pub date: DateTime<Utc>,
    pub optimistic_growth: Option<f64>,
    pub neutral_growth: Option<f64>,
    pub pesimistic_growth: Option<f64>,
    pub company_id: Option<i64>,
    pub user_id: Option<i64>,
}

#[derive(Queryable, Debug)]
pub struct UsersUserPermission {
    pub id: i64,
    pub user_id: i64,
    pub permission_id: i32,
}

#[derive(Queryable, Debug)]
pub struct Visiteur {
    pub id: i64,
    pub ip: Option<String>,
    pub session_id: Option<String>,
    pub http_user_agent: Option<String>,
    pub country_code: Option<String>,
    pub country_name: Option<String>,
    pub dma_code: Option<String>,
    pub is_in_european_union: Option<bool>,
    pub latitude: Option<String>,
    pub longitude: Option<String>,
    pub city: Option<String>,
    pub region: Option<String>,
    pub time_zone: Option<String>,
    pub postal_code: Option<String>,
    pub continent_code: Option<String>,
    pub continent_name: Option<String>,
    pub first_visit_date: DateTime<Utc>,
    pub is_bot: bool,
}

#[derive(Queryable, Debug)]
pub struct VisitsHistorialUser {
    pub id: i64,
    pub date: DateTime<Utc>,
    pub current_path: Option<String>,
    pub comes_from: Option<String>,
    pub user_id: Option<i64>,
    pub parsed: bool,
}

#[derive(Queryable, Debug)]
pub struct VisitsHistorialVisiteur {
    pub id: i64,
    pub date: DateTime<Utc>,
    pub current_path: Option<String>,
    pub comes_from: Option<String>,
    pub user_id: Option<i64>,
    pub parsed: bool,
}

#[derive(Queryable, Debug)]
pub struct WebsiteEmail {
    pub id: i64,
    pub title: String,
    pub content: String,
    pub date_to_send: Option<DateTime<Utc>>,
    pub sent: bool,
    pub default_content_id: Option<i64>,
    pub default_title_id: Option<i64>,
    pub whom_to_send: String,
    pub content_type_id: Option<i32>,
    pub object_id: Option<i64>,
    pub created_at: Option<DateTime<Utc>>,
    pub updated_at: Option<DateTime<Utc>>,
    pub campaign_id: Option<i64>,
    pub call_to_action: Option<String>,
    pub call_to_action_url: Option<String>,
}

#[derive(Queryable, Debug)]
pub struct WebsiteEmailsTitleEmoji {
    pub id: i64,
    pub websiteemail_id: i64,
    pub emoji_id: i64,
}

#[derive(Queryable, Debug)]
pub struct WebsiteEmailsTrack {
    pub id: i64,
    pub date_sent: DateTime<Utc>,
    pub opened: bool,
    pub date_opened: DateTime<Utc>,
    pub email_related_id: Option<i64>,
    pub sent_to_id: i64,
    pub created_at: Option<DateTime<Utc>>,
    pub updated_at: Option<DateTime<Utc>>,
}

#[derive(Queryable, Debug)]
pub struct WebsiteEmailsUsersSelected {
    pub id: i64,
    pub websiteemail_id: i64,
    pub user_id: i64,
}

#[derive(Queryable, Debug)]
pub struct WebsitePagesLegal {
    pub id: i64,
    pub title: String,
    pub slug: Option<String>,
    pub content: String,
}

#[derive(Queryable, Debug)]
pub struct WebsiteRoadmap {
    pub id: i64,
    pub created_at: DateTime<Utc>,
    pub updated_at: DateTime<Utc>,
    pub title: Option<String>,
    pub slug: Option<String>,
    pub content: String,
    pub total_votes: i32,
    pub total_views: i32,
    pub status: String,
    pub author_id: Option<i64>,
    pub category_id: Option<i64>,
    pub checkings: serde_json::Value,
    pub times_shared: i32,
}

#[derive(Queryable, Debug)]
pub struct WebsiteRoadmapComment {
    pub id: i64,
    pub created_at: DateTime<Utc>,
    pub updated_at: DateTime<Utc>,
    pub content: String,
    pub author_id: Option<i64>,
    pub content_related_id: Option<i64>,
}

#[derive(Queryable, Debug)]
pub struct WebsiteRoadmapDownvote {
    pub id: i64,
    pub roadmap_id: i64,
    pub user_id: i64,
}

#[derive(Queryable, Debug)]
pub struct WebsiteRoadmapTag {
    pub id: i64,
    pub roadmap_id: i64,
    pub tag_id: i64,
}

#[derive(Queryable, Debug)]
pub struct WebsiteRoadmapUpvote {
    pub id: i64,
    pub roadmap_id: i64,
    pub user_id: i64,
}

#[derive(Queryable, Debug)]
pub struct WriterFollowersHistorial {
    pub id: i64,
    pub started_following: bool,
    pub stop_following: bool,
    pub date: DateTime<Utc>,
    pub user_followed_id: Option<i64>,
    pub user_following_id: Option<i64>,
}

#[derive(Queryable, Debug)]
pub struct WriterFollowersNewsletter {
    pub id: i64,
    pub user_id: Option<i64>,
}

#[derive(Queryable, Debug)]
pub struct WriterFollowersNewslettersFollower {
    pub id: i64,
    pub newsletterfollowers_id: i64,
    pub user_id: i64,
}

#[derive(Queryable, Debug)]
pub struct WriterProfile {
    pub id: i64,
    pub created_at: DateTime<Utc>,
    pub host_name: Option<String>,
    pub long_description: String,
    pub facebook: Option<String>,
    pub twitter: Option<String>,
    pub instagram: Option<String>,
    pub youtube: Option<String>,
    pub linkedin: Option<String>,
    pub tiktok: Option<String>,
    pub user_id: Option<i64>,
}

